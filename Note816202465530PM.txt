// Importamos React y el hook useState para manejar el estado del componente
import React, { useState } from 'react';
// Importamos NavLink de react-router-dom para manejar la navegación entre páginas
import { NavLink } from 'react-router-dom';
// Importamos el ícono FaBars desde react-icons/fa para usarlo en el botón flotante
import { FaBars } from 'react-icons/fa';
// Importamos el archivo de estilos SCSS para este componente
import '../styles/FloatingButton.scss';

// Definimos el componente FloatingButton
const FloatingButton = () => {
    // Utilizamos el hook useState para manejar si el menú flotante está abierto o cerrado
    const [isOpen, setIsOpen] = useState(false);

    // Función para alternar el estado del menú flotante (abierto/cerrado)
    const toggleMenu = () => {
        setIsOpen(!isOpen);
    };

    // Renderizamos el botón flotante y el menú
    return (
        <div className="floating-button">
            {/* Botón para abrir/cerrar el menú */}
            <button onClick={toggleMenu} className="btn btn-primary">
                <FaBars /> {/* Ícono de barras para el menú */}
            </button>

            {/* Menú flotante, que solo se muestra si isOpen es true */}
            {isOpen && (
                <div className={`floating-menu ${isOpen ? 'show' : ''}`}>
                    <nav className="nav flex-column">
                        {/* Cada NavLink es un enlace a una ruta diferente en la aplicación */}
                        {/* Al hacer clic en cualquier enlace, el menú se cierra */}
                        <NavLink to="/" className="nav-link" onClick={toggleMenu}>Home</NavLink>
                        <NavLink to="/menus" className="nav-link" onClick={toggleMenu}>Menús</NavLink>
                        <NavLink to="/realizar-pedido" className="nav-link" onClick={toggleMenu}>Realizar Pedido</NavLink>
                        <NavLink to="/pedidos" className="nav-link" onClick={toggleMenu}>Pedidos</NavLink>
                        <NavLink to="/gestion-datos" className="nav-link" onClick={toggleMenu}>Gestión de Datos</NavLink> {/* Nueva ruta */}
                    </nav>
                </div>
            )}
        </div>
    );
};

// Exportamos el componente FloatingButton para que pueda ser utilizado en otras partes de la aplicación
export default FloatingButton;
// Importamos React para crear componentes
import React from 'react';
// Importamos Link desde react-router-dom para manejar la navegación entre páginas
import { Link } from 'react-router-dom';
// Importamos el archivo de estilos SCSS para este componente
import '../styles/Header.scss';
// Importamos el logo de la aplicación desde la carpeta assets
import logo from '../assets/logo.png';

// Definimos el componente Header
const Header = () => {
    // Función para manejar el cierre de sesión
    const handleLogout = () => {
        // Removemos el token de autenticación del almacenamiento local (localStorage)
        localStorage.removeItem('token');
    };

    // Renderizamos el encabezado (header) de la aplicación
    return (
        <header className="header navbar navbar-expand-lg navbar-dark bg-primary">
            <div className="container d-flex justify-content-between align-items-center">
                {/* Sección izquierda del encabezado con el logo */}
                <div className="header-left d-flex align-items-center">
                    <img src={logo} alt="Logo" className="logo" />
                </div>
                {/* Sección derecha del encabezado con el enlace para cerrar sesión */}
                <div className="header-right">
                    {/* Enlace para cerrar sesión, que redirige a la página de login y ejecuta handleLogout */}
                    <Link to="/login" className="nav-link" onClick={handleLogout}>Cerrar sesión</Link>
                </div>
            </div>
        </header>
    );
};

// Exportamos el componente Header para que pueda ser utilizado en otras partes de la aplicación
export default Header;
import React, { useState, useEffect } from 'react';
import { Collapse, Spin, Select } from 'antd';
import { getPacientes, getPedidosCompletados } from '../services/api';
import '../styles/HistorialPedidos.scss';

const { Panel } = Collapse;
const { Option } = Select;

const HistorialPedidos = () => {
    const [pacientes, setPacientes] = useState([]);
    const [pedidosCompletados, setPedidosCompletados] = useState([]);
    const [loading, setLoading] = useState(false);
    const [selectedPaciente, setSelectedPaciente] = useState(null);

    useEffect(() => {
        const fetchPacientes = async () => {
            try {
                const response = await getPacientes();
                setPacientes(response);
            } catch (error) {
                console.error('Error fetching patients', error);
            }
        };

        fetchPacientes();
    }, []);

    useEffect(() => {
        const fetchPedidosCompletados = async () => {
            if (!selectedPaciente) {
                setPedidosCompletados([]);
                return;
            }

            setLoading(true);
            try {
                const response = await getPedidosCompletados(selectedPaciente);
                setPedidosCompletados(response);
            } catch (error) {
                console.error('Error fetching completed orders', error);
            }
            setLoading(false);
        };

        fetchPedidosCompletados();
    }, [selectedPaciente]);

    const handlePacienteChange = (value) => {
        setSelectedPaciente(value);
    };

    const filterOption = (input, option) => {
        return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;
    };

    if (loading) {
        return <Spin />;
    }

    const renderSections = (pedido) => {
        const sectionsToShow = {
            'Adicional': ['adicionales'],
            'Algo': ['adicionales', 'bebidas'],
            'Onces': ['adicionales'],
            'Desayuno': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Almuerzo': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Cena': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas']
        };

        return pedido.menu.sections.map(section => {
            const optionsToRender = sectionsToShow[section.titulo];
            return optionsToRender && optionsToRender.length > 0 ? (
                <div key={section.id}>
                    <h4>{section.titulo}</h4>
                    {optionsToRender.map(optionType => (
                        <div key={optionType}>
                            <h5>{optionType.charAt(0).toUpperCase() + optionType.slice(1)}</h5>
                            {section[optionType].map(option => (
                                <div key={option.id}>
                                    {option.texto}
                                </div>
                            ))}
                        </div>
                    ))}
                </div>
            ) : null;
        });
    };

    return (
        <div className="historial-pedidos">
            <h2>Historial de Pedidos Completados</h2>
            <Select
                showSearch
                placeholder="Seleccionar Paciente"
                value={selectedPaciente}
                onChange={handlePacienteChange}
                style={{ width: 300, marginBottom: 20 }}
                filterOption={filterOption}
            >
                {pacientes.map(paciente => (
                    <Option key={paciente.id} value={paciente.id}>
                        {paciente.name} (Cama: {paciente.cama.nombre}, Hab: {paciente.cama.habitacion.nombre}, Serv: {paciente.cama.habitacion.servicio.nombre})
                    </Option>
                ))}
            </Select>

            {pedidosCompletados.length > 0 ? (
                <Collapse>
                    {pedidosCompletados.map(pedido => (
                        <Panel header={`Pedido ${pedido.id} - ${pedido.paciente.name}`} key={pedido.id}>
                            <h4>Fecha del Pedido: {new Date(pedido.fecha_pedido).toLocaleString()}</h4>
                            {renderSections(pedido)}
                            <div className="adicionales">
                                <h4>Opciones Adicionales del Menú</h4>
                                <div>Leche: {pedido.adicionales.leche}</div>
                                <div>Bebida: {pedido.adicionales.bebida}</div>
                                <div>Azúcar/Panela: {pedido.adicionales.azucarPanela.join(', ')}</div>
                                <div>Vegetales: {pedido.adicionales.vegetales}</div>
                                <div>Golosina: {pedido.adicionales.golosina ? 'Sí' : 'No'}</div>
                            </div>
                        </Panel>
                    ))}
                </Collapse>
            ) : (
                <p>No hay pedidos completados para este paciente.</p>
            )}
        </div>
    );
};

export default HistorialPedidos;
// Importamos React para crear componentes
import React from 'react';
// Importamos los componentes Header, Sidebar y FloatingButton
import Header from './Header';
import Sidebar from './Sidebar';
import FloatingButton from './FloatingButton'; 
// Importamos Outlet desde react-router-dom para renderizar sub-rutas dentro del componente principal
import { Outlet } from 'react-router-dom';
// Importamos el archivo de estilos SCSS para este componente
import '../styles/Layout.scss';

// Definimos el componente Layout que organiza la estructura de la aplicación
const Layout = () => {
    return (
        <div className="layout d-flex flex-column">
            {/* Componente Header en la parte superior */}
            <Header />
            
            {/* Contenedor principal que incluye la barra lateral y el contenido principal */}
            <div className="main-content d-flex flex-grow-1">
                {/* Componente Sidebar en el lado izquierdo */}
                <Sidebar />
                
                {/* Contenedor para el contenido principal de la página */}
                <div className="content flex-grow-1 p-3">
                    {/* Outlet se usa para renderizar las rutas secundarias que cambian según la navegación */}
                    <Outlet />
                </div>
            </div>
            
            {/* Botón flotante para navegación rápida */}
            <FloatingButton /> 
        </div>
    );
};

// Exportamos el componente Layout para que pueda ser utilizado en otras partes de la aplicación
export default Layout;
import React, { useState, useEffect } from 'react';
import { Button, Spin, Collapse } from 'antd';
import { getPedidos, updatePedido } from '../services/api';
import '../styles/PedidosPendientes.scss';

const { Panel } = Collapse;

const PedidosPendientes = () => {
    const [pedidos, setPedidos] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchPedidos = async () => {
            try {
                const response = await getPedidos();
                setPedidos(response.filter(pedido => pedido.status !== 'completado'));
                setLoading(false);
            } catch (error) {
                console.error('Error fetching pedidos', error);
                setLoading(false);
            }
        };

        fetchPedidos();
    }, []);

    const handleSectionStatusChange = async (pedidoId, sectionTitle) => {
        try {
            const pedido = pedidos.find(p => p.id === pedidoId);

            const updatedSections = { ...pedido.sectionStatus, [sectionTitle]: 'completado' };

            const allSectionsCompleted = Object.values(updatedSections).length === pedido.menu.sections.length &&
                                         Object.values(updatedSections).every(status => status === 'completado');

            const updatedPedido = {
                ...pedido,
                status: allSectionsCompleted ? 'completado' : 'en_proceso',
                sectionStatus: updatedSections,
            };

            await updatePedido(pedidoId, updatedPedido);

            setPedidos(prevPedidos =>
                prevPedidos.map(p =>
                    p.id === pedidoId
                        ? { ...p, sectionStatus: updatedSections, status: updatedPedido.status }
                        : p
                ).filter(p => p.status !== 'completado')
            );

        } catch (error) {
            console.error('Error updating section status', error);
        }
    };

    if (loading) {
        return <Spin />;
    }

    const renderSections = (pedido) => {
        const sectionsToShow = {
            'Adicional': ['adicionales'],
            'Algo': ['adicionales', 'bebidas'],
            'Onces': ['adicionales'],
            'Desayuno': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Almuerzo': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Cena': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas']
        };

        return pedido.menu.sections.map(section => {
            const optionsToRender = sectionsToShow[section.titulo];

            return optionsToRender && optionsToRender.length > 0 ? (
                <div key={section.id}>
                    <h4>{section.titulo}</h4>
                    {optionsToRender.map(optionType => (
                        <div key={optionType}>
                            <h5>{optionType.charAt(0).toUpperCase() + optionType.slice(1)}</h5>
                            {section[optionType].map(option => (
                                <div key={option.id}>
                                    {option.texto}
                                </div>
                            ))}
                        </div>
                    ))}
                    <Button
                        onClick={() => handleSectionStatusChange(pedido.id, section.titulo)}
                        disabled={pedido.sectionStatus?.[section.titulo] === 'completado'}
                    >
                        {pedido.sectionStatus?.[section.titulo] === 'completado' ? 'Completado' : 'Marcar como Completado'}
                    </Button>
                </div>
            ) : null;
        });
    };

    return (
        <div className="pedidos-pendientes">
            <h2>Pedidos Pendientes</h2>
            <Collapse>
                {pedidos.length > 0 ? (
                    pedidos.map(pedido => (
                        <Panel header={`Pedido ${pedido.id} - ${pedido.paciente.name}`} key={pedido.id}>
                            {renderSections(pedido)}
                            <div>
                                <h4>Opciones Adicionales del Menú</h4>
                                <div>Leche: {pedido.adicionales.leche}</div>
                                <div>Bebida: {pedido.adicionales.bebida}</div>
                                <div>Azúcar/Panela: {pedido.adicionales.azucarPanela.join(', ')}</div>
                                <div>Vegetales: {pedido.adicionales.vegetales}</div>
                                <div>Golosina: {pedido.adicionales.golosina ? 'Sí' : 'No'}</div>
                            </div>
                        </Panel>
                    ))
                ) : (
                    <p>No hay pedidos pendientes.</p>
                )}
            </Collapse>
        </div>
    );
};

export default PedidosPendientes;
// Importamos React para crear componentes
import React from 'react';
// Importamos Navigate desde react-router-dom para redirigir al usuario
import { Navigate } from 'react-router-dom';

// Definimos el componente PrivateRoute para manejar rutas privadas
const PrivateRoute = ({ children }) => {
    // Obtenemos el token de autenticación desde el almacenamiento local (localStorage)
    const token = localStorage.getItem('token');
    
    // Si el token existe, renderizamos los componentes hijos (children)
    // Si no existe, redirigimos al usuario a la página de inicio de sesión ("/login")
    return token ? children : <Navigate to="/login" />;
};

// Exportamos el componente PrivateRoute para que pueda ser utilizado en otras partes de la aplicación
export default PrivateRoute;
// Importamos React para crear componentes
import React from 'react';
// Importamos NavLink desde react-router-dom para manejar la navegación entre páginas
import { NavLink } from 'react-router-dom';
// Importamos el archivo de estilos SCSS para este componente
import '../styles/Sidebar.scss';

// Definimos el componente Sidebar que representa la barra lateral de navegación
const Sidebar = () => {
  return (
    // Contenedor principal de la barra lateral, que ocupa toda la altura de la ventana
    <div className="sidebar vh-100">
      {/* Navegación vertical con enlaces a diferentes secciones de la aplicación */}
      <nav className="nav flex-column">
        {/* Cada NavLink crea un enlace de navegación que cambia de ruta */}
        <NavLink to="/" className="nav-link">Inicio</NavLink>
        <NavLink to="/menus" className="nav-link">Menús</NavLink>
        <NavLink to="/realizar-pedido" className="nav-link">Realizar Pedido</NavLink>
        <NavLink to="/gestion-datos" className="nav-link">Gestión de Datos</NavLink> {/* Nueva ruta */}
      </nav>
    </div>
  );
};

// Exportamos el componente Sidebar para que pueda ser utilizado en otras partes de la aplicación
export default Sidebar;
import React, { useState, useEffect } from 'react';
import { Button, Drawer, Tabs, Table, Switch, Modal, Form, Input, Select } from 'antd';
import api from '../services/api';
import '../styles/DataManagement.scss';

const { TabPane } = Tabs;
const { Option } = Select;

const DataManagement = () => {
    const [pacientes, setPacientes] = useState([]);
    const [servicios, setServicios] = useState([]);
    const [habitaciones, setHabitaciones] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isDrawerOpen, setIsDrawerOpen] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [currentEntity, setCurrentEntity] = useState(null);
    const [isEditing, setIsEditing] = useState(false);
    const [form] = Form.useForm();

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [pacientesResponse, serviciosResponse, habitacionesResponse] = await Promise.all([
                    api.get('/pacientes/'),
                    api.get('/servicios/'),
                    api.get('/habitaciones/')
                ]);

                setPacientes(pacientesResponse.data);
                setServicios(serviciosResponse.data);
                setHabitaciones(habitacionesResponse.data);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching data:', error);
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const openDrawer = () => setIsDrawerOpen(true);
    const closeDrawer = () => setIsDrawerOpen(false);

    const openModal = (entity = null) => {
        setCurrentEntity(entity);
        form.resetFields();
        if (entity) {
            setIsEditing(true);
            form.setFieldsValue(entity);
        } else {
            setIsEditing(false);
        }
        setIsModalOpen(true);
    };

    const closeModal = () => setIsModalOpen(false);

    const handleSave = async () => {
        try {
            const values = await form.validateFields();
            if (isEditing && currentEntity) {
                // Editar la entidad existente
                await api.put(`/${currentEntity.type}/${currentEntity.id}/`, values);
            } else {
                // Crear una nueva entidad
                await api.post(`/${values.type}/`, values);
            }
            closeModal();
            refreshData();
        } catch (error) {
            console.error('Error saving data:', error);
        }
    };

    const toggleActivo = async (item, type) => {
        try {
            const updatedItem = { ...item, activo: !item.activo };
            await api.put(`/${type}/${item.id}/`, updatedItem);
            refreshData();
        } catch (error) {
            console.error('Error toggling activo:', error);
        }
    };

    const refreshData = async () => {
        setLoading(true);
        try {
            const [pacientesResponse, serviciosResponse, habitacionesResponse] = await Promise.all([
                api.get('/pacientes/'),
                api.get('/servicios/'),
                api.get('/habitaciones/')
            ]);

            setPacientes(pacientesResponse.data);
            setServicios(serviciosResponse.data);
            setHabitaciones(habitacionesResponse.data);
            setLoading(false);
        } catch (error) {
            console.error('Error fetching data:', error);
            setLoading(false);
        }
    };

    if (loading) {
        return <div>Cargando...</div>;
    }

    const renderActions = (record, type) => (
        <>
            <Button onClick={() => openModal({ ...record, type })}>Editar</Button>
            <Switch
                checked={record.activo}
                onChange={() => toggleActivo(record, type)}
                style={{ marginLeft: 8 }}
            />
        </>
    );

    return (
        <div className="data-management container mt-5">
            <h2>Gestión de Pacientes, Servicios y Habitaciones</h2>

            <Button type="primary" onClick={openDrawer}>
                Panel de Gestión
            </Button>

            <div className="active-data mt-4">
                <h3>Servicios Activos</h3>
                <ul className="list-group mb-4">
                    {servicios.filter(s => s.activo).map(servicio => (
                        <li key={servicio.id} className="list-group-item">
                            {servicio.nombre}
                        </li>
                    ))}
                </ul>

                <h3>Habitaciones Activas</h3>
                <ul className="list-group mb-4">
                    {habitaciones.filter(h => h.activo).map(habitacion => (
                        <li key={habitacion.id} className="list-group-item">
                            {habitacion.nombre} - {habitacion.servicio}
                        </li>
                    ))}
                </ul>

                <h3>Pacientes Activos</h3>
                <ul className="list-group">
                    {pacientes.filter(p => p.activo).map(paciente => (
                        <li key={paciente.id} className="list-group-item">
                            {paciente.name} - Habitación: {paciente.cama.habitacion.nombre} - Servicio: {paciente.cama.habitacion.servicio.nombre}
                        </li>
                    ))}
                </ul>
            </div>

            <Drawer
                title="Gestión de Datos"
                placement="right"
                onClose={closeDrawer}
                open={isDrawerOpen}
                width={600}
            >
                <Tabs defaultActiveKey="1">
                    <TabPane tab="Servicios" key="1">
                        <Button type="primary" onClick={() => openModal({ type: 'servicios' })} style={{ marginBottom: 16 }}>
                            Agregar Servicio
                        </Button>
                        <Table
                            dataSource={servicios} // Mostrar todos los servicios en el Panel de Gestión
                            columns={[
                                { title: 'Nombre', dataIndex: 'nombre', key: 'nombre' },
                                {
                                    title: 'Activo',
                                    key: 'activo',
                                    render: (_, record) => (
                                        <Switch
                                            checked={record.activo}
                                            onChange={() => toggleActivo(record, 'servicios')}
                                        />
                                    ),
                                },
                                {
                                    title: 'Acciones',
                                    key: 'acciones',
                                    render: (_, record) => renderActions(record, 'servicios'),
                                },
                            ]}
                            rowKey="id"
                        />
                    </TabPane>
                    <TabPane tab="Habitaciones" key="2">
                        <Button type="primary" onClick={() => openModal({ type: 'habitaciones' })} style={{ marginBottom: 16 }}>
                            Agregar Habitación
                        </Button>
                        <Table
                            dataSource={habitaciones} // Mostrar todas las habitaciones en el Panel de Gestión
                            columns={[
                                { title: 'Nombre', dataIndex: 'nombre', key: 'nombre' },
                                { title: 'Servicio', dataIndex: 'servicio', key: 'servicio' },
                                {
                                    title: 'Activo',
                                    key: 'activo',
                                    render: (_, record) => (
                                        <Switch
                                            checked={record.activo}
                                            onChange={() => toggleActivo(record, 'habitaciones')}
                                        />
                                    ),
                                },
                                {
                                    title: 'Acciones',
                                    key: 'acciones',
                                    render: (_, record) => renderActions(record, 'habitaciones'),
                                },
                            ]}
                            rowKey="id"
                        />
                    </TabPane>
                    <TabPane tab="Pacientes" key="3">
                        <Button type="primary" onClick={() => openModal({ type: 'pacientes' })} style={{ marginBottom: 16 }}>
                            Agregar Paciente
                        </Button>
                        <Table
                            dataSource={pacientes} // Mostrar todos los pacientes en el Panel de Gestión
                            columns={[
                                { title: 'Nombre', dataIndex: 'name', key: 'name' },
                                { title: 'Cama', dataIndex: ['cama', 'nombre'], key: 'cama' },
                                { title: 'Habitación', dataIndex: ['cama', 'habitacion', 'nombre'], key: 'habitacion' },
                                {
                                    title: 'Activo',
                                    key: 'activo',
                                    render: (_, record) => (
                                        <Switch
                                            checked={record.activo}
                                            onChange={() => toggleActivo(record, 'pacientes')}
                                        />
                                    ),
                                },
                                {
                                    title: 'Acciones',
                                    key: 'acciones',
                                    render: (_, record) => renderActions(record, 'pacientes'),
                                },
                            ]}
                            rowKey="id"
                        />
                    </TabPane>
                </Tabs>
            </Drawer>

            <Modal
                title={isEditing ? `Editar ${currentEntity?.type}` : `Agregar ${form.getFieldValue('type')}`}
                open={isModalOpen}
                onCancel={closeModal}
                onOk={handleSave}
            >
                <Form form={form} layout="vertical">
                    <Form.Item name="type" hidden>
                        <Input />
                    </Form.Item>
                    <Form.Item name="nombre" label="Nombre" rules={[{ required: true, message: 'El nombre es requerido' }]}>
                        <Input />
                    </Form.Item>
                    {currentEntity?.type === 'habitaciones' && (
                        <Form.Item name="servicio_id" label="Servicio" rules={[{ required: true, message: 'El servicio es requerido' }]}>
                            <Select>
                                {servicios.map(servicio => (
                                    <Option key={servicio.id} value={servicio.id}>
                                        {servicio.nombre}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    )}
                    {currentEntity?.type === 'pacientes' && (
                        <Form.Item name="cama_id" label="Cama" rules={[{ required: true, message: 'La cama es requerida' }]}>
                            <Select>
                                {habitaciones.flatMap(habitacion =>
                                    habitacion.camas.map(cama => (
                                        <Option key={cama.id} value={cama.id}>
                                            {cama.nombre} - Habitación: {habitacion.nombre}
                                        </Option>
                                    ))
                                )}
                            </Select>
                        </Form.Item>
                    )}
                </Form>
            </Modal>
        </div>
    );
};

export default DataManagement;
// Importamos React para crear componentes
import React from 'react';
// Importamos el archivo de estilos SCSS específico para este componente
import '../styles/Home.scss';

// Definimos el componente Home que representa la página de inicio
const Home = () => {
    return (
        // Contenedor principal con la clase "home" para aplicar estilos específicos
        // "text-center" es una clase de Bootstrap para centrar el texto
        <div className="home text-center">
            {/* Título de la página de inicio */}
            <h1>Menú Preferencial - Clínica San Juan de Dios</h1>
        </div>
    );
};

// Exportamos el componente Home para que pueda ser utilizado en otras partes de la aplicación
export default Home;
// Importamos React y el hook useState para manejar el estado del componente
import React, { useState } from 'react';
// Importamos useNavigate desde react-router-dom para manejar la navegación
import { useNavigate } from 'react-router-dom';
// Importamos el servicio API para realizar peticiones al backend
import api from '../services/api';
// Importamos el archivo de estilos SCSS específico para este componente
import '../styles/Login.scss';

// Definimos el componente Login
const Login = () => {
    // Estado para manejar el nombre de usuario, contraseña y errores
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    // Inicializamos el hook useNavigate para la redirección después del login
    const navigate = useNavigate();

    // Función para manejar el envío del formulario de login
    const handleLogin = async (e) => {
        e.preventDefault();  // Prevenimos el comportamiento por defecto del formulario
        try {
            // Enviamos una petición POST al backend con el nombre de usuario y la contraseña
            const response = await api.post('/auth/login/', { username, password });
            // Guardamos el token de acceso en localStorage
            localStorage.setItem('token', response.data.access);
            // Redirigimos al usuario a la página de inicio después de un login exitoso
            navigate('/');
        } catch (error) {
            // Si hay un error, actualizamos el estado para mostrar un mensaje de error
            setError('Login failed');
        }
    };

    // Renderizamos el formulario de login
    return (
        <div className="login-container container mt-5">
            <h2>Login</h2>
            <form onSubmit={handleLogin}>
                <div className="form-group">
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="form-control"
                    />
                </div>
                <div className="form-group">
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="form-control"
                    />
                </div>
                <button type="submit" className="btn btn-primary btn-block">Login</button>
                {/* Mostrar mensaje de error si ocurre un fallo en el login */}
                {error && <p className="text-danger text-center mt-2">{error}</p>}
            </form>
        </div>
    );
};

// Exportamos el componente Login para que pueda ser utilizado en otras partes de la aplicación
export default Login;
// Importamos React y los hooks useState y useEffect para manejar el estado y efectos
import React, { useState, useEffect } from 'react';
// Importamos varios componentes y utilidades desde Ant Design
import { Button, Modal, Form, Input, notification, Spin, Alert, List, Typography, Collapse } from 'antd';
// Importamos varios íconos desde Ant Design
import { PlusOutlined, DeleteOutlined, EyeOutlined, EditOutlined, ExclamationCircleOutlined } from '@ant-design/icons';
// Importamos funciones API para manejar las operaciones CRUD de menús
import { createMenu, getMenus, deleteMenu, updateMenu } from '../services/api';
// Importamos los estilos SCSS para este componente
import '../styles/Menus.scss';

// Desestructuramos componentes desde Ant Design para un acceso más limpio
const { Title } = Typography;
const { Panel } = Collapse;
const { confirm } = Modal;

// Definimos el componente MenuPage
const MenuPage = () => {
    // Estados para manejar la visibilidad de modales, el nombre del menú, el menú actual, y las opciones del menú
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
    const [menuName, setMenuName] = useState('');
    const [currentMenu, setCurrentMenu] = useState(null);
    const [options, setOptions] = useState({
        adicional: { adicionales: [] },
        algo: { adicionales: [], bebidas: [] },
        onces: { adicionales: [] },
        desayuno: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        almuerzo: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        cena: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
    });
    const [newOptionText, setNewOptionText] = useState('');
    const [currentOptionType, setCurrentOptionType] = useState({});
    const [isOptionModalOpen, setIsOptionModalOpen] = useState(false);
    const [menus, setMenus] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Función para mostrar el modal de creación/edición de menús
    const showModal = () => {
        setIsModalOpen(true);
        setCurrentMenu(null);
        setMenuName('');
        setOptions({
            adicional: { adicionales: [] },
            algo: { adicionales: [], bebidas: [] },
            onces: { adicionales: [] },
            desayuno: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            almuerzo: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            cena: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        });
    };

    // Función para mostrar el modal de detalles del menú
    const showDetailModal = (menu) => {
        setCurrentMenu(menu);
        setIsDetailModalOpen(true);
    };

    // Función para manejar la creación o actualización de un menú
    const handleOk = async () => {
        if (!menuName) {
            notification.error({ message: 'Error', description: 'El nombre del menú es obligatorio' });
            return;
        }

        const sections = Object.keys(options).map(key => {
            if (key === 'adicional') {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || []
                };
            } else if (key === 'algo') {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || [],
                    bebidas: options[key].bebidas.map(({ id, ...rest }) => rest) || []
                };
            } else if (key === 'onces') {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || []
                };
            } else {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || [],
                    platos_principales: options[key].platos_principales.map(({ id, ...rest }) => rest) || [],
                    acompanantes: options[key].acompanantes.map(({ id, ...rest }) => rest) || [],
                    bebidas: options[key].bebidas.map(({ id, ...rest }) => rest) || [],
                };
            }
        });

        // Verificación de al menos dos opciones por sección
        for (let section of sections) {
            if (section.adicionales && section.adicionales.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Adicionales` });
                return;
            }
            if (section.platos_principales && section.platos_principales.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Platos Principales` });
                return;
            }
            if (section.acompanantes && section.acompanantes.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Acompañantes` });
                return;
            }
            if (section.bebidas && section.bebidas.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Bebidas` });
                return;
            }
        }

        const payload = {
            nombre: menuName,
            sections
        };

        console.log('Payload:', JSON.stringify(payload, null, 2));

        try {
            let response;
            if (currentMenu) {
                response = await updateMenu(currentMenu.id, payload);
                notification.success({ message: 'Menú actualizado exitosamente' });
            } else {
                response = await createMenu(payload);
                notification.success({ message: 'Menú creado exitosamente' });
            }
            console.log('Response:', response);
            setIsModalOpen(false);
            fetchMenus();
        } catch (error) {
            console.error('Error:', error.response?.data?.message || error.message);
            notification.error({ message: 'Error al crear/actualizar el menú', description: error.response?.data?.message || error.message });
        }
    };

    // Función para cancelar el modal y limpiar los estados
    const handleCancel = () => {
        setIsModalOpen(false);
        setIsDetailModalOpen(false);
        setCurrentMenu(null);
        setMenuName('');
        setOptions({
            adicional: { adicionales: [] },
            algo: { adicionales: [], bebidas: [] },
            onces: { adicionales: [] },
            desayuno: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            almuerzo: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            cena: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        });
    };

    // Función para abrir el modal de opciones para una sección específica
    const openOptionModal = (section, type) => {
        setCurrentOptionType({ section, type });
        setNewOptionText('');
        setIsOptionModalOpen(true);
    };

    // Función para agregar una nueva opción a una sección
    const handleAddOption = () => {
        if (!newOptionText) {
            notification.error({ message: 'Error', description: 'Debe ingresar un texto para la opción' });
            return;
        }

        setOptions(prev => {
            const newOptions = { ...prev };
            newOptions[currentOptionType.section][currentOptionType.type].push({ texto: newOptionText, tipo: currentOptionType.type });
            return newOptions;
        });

        setIsOptionModalOpen(false);
    };

    // Función para eliminar una opción de una sección específica
    const removeOption = (section, type, index) => {
        setOptions(prev => {
            const newOptions = { ...prev };
            newOptions[section][type].splice(index, 1);
            return newOptions;
        });
    };

    // Función para obtener los menús desde el servidor
    const fetchMenus = async () => {
        setLoading(true);
        setError(null);
        try {
            const data = await getMenus();
            setMenus(data);
            console.log('Fetched menus:', data);
        } catch (error) {
            setError('Error fetching menus: ' + error.message);
        } finally {
            setLoading(false);
        }
    };

    // Función para manejar la eliminación de un menú
    const handleDeleteMenu = async (id) => {
        confirm({
            title: '¿Está seguro de que desea eliminar este menú?',
            icon: <ExclamationCircleOutlined />,
            content: 'Esta acción no se puede deshacer',
            okText: 'Sí',
            okType: 'danger',
            cancelText: 'No',
            onOk: async () => {
                try {
                    await deleteMenu(id);
                    notification.success({ message: 'Menú eliminado exitosamente' });
                    fetchMenus();
                } catch (error) {
                    notification.error({ message: 'Error al eliminar el menú', description: error.response?.data?.message || error.message });
                }
            },
        });
    };

    // Función para manejar la edición de un menú existente
    const handleEditMenu = (menu) => {
        setCurrentMenu(menu);
        setMenuName(menu.nombre);
        setOptions(menu.sections.reduce((acc, section) => {
            acc[section.titulo.toLowerCase()] = {
                adicionales: section.adicionales || [],
                platos_principales: section.platos_principales || [],
                acompanantes: section.acompanantes || [],
                bebidas: section.bebidas || []
            };
            return acc;
        }, {}));
        setIsModalOpen(true);
        console.log('Editing menu:', menu);
    };

    // Efecto para obtener los menús al cargar el componente
    useEffect(() => {
        fetchMenus();
    }, []);

    return (
        <div className="menu-page">
            <Title level={2}>Menús</Title>
            <Button className="custom-button" type="primary" onClick={showModal} icon={<PlusOutlined />}>
                Crear Menú
            </Button>
            <Modal
                title={currentMenu ? "Editar Menú" : "Crear Menú"}
                open={isModalOpen}
                onOk={handleOk}
                onCancel={handleCancel}
                footer={
                    <div className="modal-footer">
                        <Button key="back" className="custom-button save-button" onClick={handleCancel}>
                            Cancelar
                        </Button>
                        <Button key="submit" type="primary" className="custom-button save-button" onClick={handleOk}>
                            {currentMenu ? "Actualizar Menú" : "Guardar Menú"}
                        </Button>
                    </div>
                }
            >
                <Form layout="vertical">
                    <Form.Item label="Nombre del Menú">
                        <Input value={menuName} onChange={e => setMenuName(e.target.value)} />
                    </Form.Item>
                    <Collapse>
                        {['adicional', 'algo', 'onces'].map(section => (
                            <Panel header={section.charAt(0).toUpperCase() + section.slice(1)} key={section}>
                                <div className="button-group vertical-buttons">
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'adicionales')} icon={<PlusOutlined />}>
                                        Agregar Adicional
                                    </Button>
                                    {section === 'algo' && (
                                        <Button className="custom-button" onClick={() => openOptionModal(section, 'bebidas')} icon={<PlusOutlined />}>
                                            Agregar Bebida
                                        </Button>
                                    )}
                                </div>
                                <List
                                    header={<div>Adicionales</div>}
                                    bordered
                                    dataSource={options[section]?.adicionales || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'adicionales', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                {section === 'algo' && (
                                    <List
                                        header={<div>Bebidas</div>}
                                        bordered
                                        dataSource={options[section]?.bebidas || []}
                                        renderItem={(opt, index) => (
                                            <List.Item
                                                actions={[
                                                    <Button
                                                        type="link"
                                                        icon={<DeleteOutlined />}
                                                        onClick={() => removeOption(section, 'bebidas', index)}
                                                    />
                                                ]}
                                            >
                                                {opt.texto}
                                            </List.Item>
                                        )}
                                    />
                                )}
                            </Panel>
                        ))}
                        {['desayuno', 'almuerzo', 'cena'].map(section => (
                            <Panel header={section.charAt(0).toUpperCase() + section.slice(1)} key={section}>
                                <div className="button-group vertical-buttons">
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'adicionales')} icon={<PlusOutlined />}>
                                        Agregar Adicional
                                    </Button>
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'platos_principales')} icon={<PlusOutlined />}>
                                        Agregar Plato Principal
                                    </Button>
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'acompanantes')} icon={<PlusOutlined />}>
                                        Agregar Acompañante
                                    </Button>
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'bebidas')} icon={<PlusOutlined />}>
                                        Agregar Bebida
                                    </Button>
                                </div>
                                <List
                                    header={<div>Adicionales</div>}
                                    bordered
                                    dataSource={options[section]?.adicionales || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'adicionales', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                <List
                                    header={<div>Platos Principales</div>}
                                    bordered
                                    dataSource={options[section]?.platos_principales || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'platos_principales', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                <List
                                    header={<div>Acompañantes</div>}
                                    bordered
                                    dataSource={options[section]?.acompanantes || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'acompanantes', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                <List
                                    header={<div>Bebidas</div>}
                                    bordered
                                    dataSource={options[section]?.bebidas || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'bebidas', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                            </Panel>
                        ))}
                    </Collapse>
                </Form>
            </Modal>

            <Modal
                title="Añadir opción"
                open={isOptionModalOpen}
                onOk={handleAddOption}
                onCancel={() => setIsOptionModalOpen(false)}
                footer={
                    <div className="modal-footer">
                        <Button key="back" className="custom-button save-button" onClick={() => setIsOptionModalOpen(false)}>
                            Cancelar
                        </Button>
                        <Button key="submit" type="primary" className="custom-button save-button" onClick={handleAddOption}>
                            OK
                        </Button>
                    </div>
                }
            >
                <Form layout="vertical">
                    <Form.Item label={`Añadir ${currentOptionType.type}`}>
                        <Input value={newOptionText} onChange={e => setNewOptionText(e.target.value)} />
                    </Form.Item>
                </Form>
            </Modal>

            <Modal
                title="Detalles del Menú"
                open={isDetailModalOpen}
                onOk={() => setIsDetailModalOpen(false)}
                onCancel={() => setIsDetailModalOpen(false)}
                footer={[
                    <Button key="back" className="custom-button save-button" onClick={() => setIsDetailModalOpen(false)}>
                        Cerrar
                    </Button>,
                ]}
            >
                {currentMenu && (
                    <div className="menu-details">
                        <Title level={3}>{currentMenu.nombre}</Title>
                        {currentMenu.sections.map(section => (
                            <div key={section.id}>
                                <Title level={4}>{section.titulo}</Title>
                                {section.adicionales?.length > 0 && (
                                    <>
                                        <Title level={5}>Adicionales</Title>
                                        <List
                                            bordered
                                            dataSource={section.adicionales}
                                            renderItem={adicional => <List.Item>{adicional.texto}</List.Item>}
                                        />
                                    </>
                                )}
                                {section.platos_principales?.length > 0 && (
                                    <>
                                        <Title level={5}>Platos Principales</Title>
                                        <List
                                            bordered
                                            dataSource={section.platos_principales}
                                            renderItem={plato => <List.Item>{plato.texto}</List.Item>}
                                        />
                                    </>
                                )}
                                {section.acompanantes?.length > 0 && (
                                    <>
                                        <Title level={5}>Acompañantes</Title>
                                        <List
                                            bordered
                                            dataSource={section.acompanantes}
                                            renderItem={acompanante => <List.Item>{acompanante.texto}</List.Item>}
                                        />
                                    </>
                                )}
                                {section.bebidas?.length > 0 && (
                                    <>
                                        <Title level={5}>Bebidas</Title>
                                        <List
                                            bordered
                                            dataSource={section.bebidas}
                                            renderItem={bebida => <List.Item>{bebida.texto}</List.Item>}
                                        />
                                    </>
                                )}
                            </div>
                        ))}
                    </div>
                )}
            </Modal>

            <div className="menu-list">
                {loading ? (
                    <div className="loading-container">
                        <Spin tip="Cargando menús..." />
                    </div>
                ) : error ? (
                    <Alert message="Error" description={error} type="error" />
                ) : menus.length > 0 ? (
                    <List
                        itemLayout="horizontal"
                        dataSource={menus}
                        renderItem={menu => (
                            <List.Item
                                actions={[
                                    <Button type="link" icon={<EyeOutlined />} onClick={() => showDetailModal(menu)} />,
                                    <Button type="link" icon={<EditOutlined />} onClick={() => handleEditMenu(menu)} />,
                                    <Button type="link" icon={<DeleteOutlined />} onClick={() => handleDeleteMenu(menu.id)} />
                                ]}
                            >
                                <List.Item.Meta
                                    title={<span className="menu-title">{menu.nombre}</span>}
                                />
                            </List.Item>
                        )}
                    />
                ) : (
                    <p>No hay menús disponibles.</p>
                )}
            </div>
        </div>
    );
};

export default MenuPage;
import React, { useEffect, useState } from 'react';
import { Select, Button, Checkbox, Spin, Collapse, Modal } from 'antd';
import { getPacientes, getMenus, createPedido } from '../services/api';
import '../styles/RealizarPedido.scss';
import PedidosPendientes from '../components/PedidosPendientes';
import HistorialPedidos from '../components/HistorialPedidos';

const { Option } = Select;
const { Panel } = Collapse;

const RealizarPedido = () => {
    const [pacientes, setPacientes] = useState([]);
    const [menus, setMenus] = useState([]);
    const [selectedPaciente, setSelectedPaciente] = useState(null);
    const [selectedMenu, setSelectedMenu] = useState(null);
    const [selectedOptions, setSelectedOptions] = useState({});
    const [additionalOptions, setAdditionalOptions] = useState({
        leche: '',
        bebida: '',
        azucarPanela: [],
        vegetales: '',
        golosina: false
    });
    const [loading, setLoading] = useState(true);
    const [confirmVisible, setConfirmVisible] = useState(false);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const pacientesResponse = await getPacientes();
                const menusResponse = await getMenus();
                setPacientes(pacientesResponse);
                setMenus(menusResponse);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching data', error);
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const handlePacienteChange = value => {
        setSelectedPaciente(value);
    };

    const handleMenuChange = value => {
        const menu = menus.find(menu => menu.id === value);
        setSelectedMenu(menu);
        setSelectedOptions({});
    };

    const handleOptionChange = (sectionName, optionType, optionId, checked) => {
        setSelectedOptions(prevOptions => {
            const newOptions = { ...prevOptions };

            if (!newOptions[sectionName]) {
                newOptions[sectionName] = {};
            }

            if (!newOptions[sectionName][optionType]) {
                newOptions[sectionName][optionType] = [];
            }

            if (checked) {
                if (optionType === 'acompanantes') {
                    if (newOptions[sectionName][optionType].length < 2) {
                        newOptions[sectionName][optionType].push(optionId);
                    }
                } else {
                    newOptions[sectionName][optionType] = [optionId];
                }
            } else {
                newOptions[sectionName][optionType] = newOptions[sectionName][optionType].filter(id => id !== optionId);
            }

            return newOptions;
        });
    };

    const validateSelections = () => {
        const errors = [];

        const sectionsValidation = {
            Adicional: { adicionales: { max: 1 } },
            Algo: { adicionales: { max: 1 }, bebidas: { max: 1 } },
            Onces: { adicionales: { max: 1 } },
            Desayuno: { adicionales: { max: 1 }, platos_principales: { max: 1 }, acompanantes: { max: 2 }, bebidas: { max: 1 } },
            Almuerzo: { adicionales: { max: 1 }, platos_principales: { max: 1 }, acompanantes: { max: 2 }, bebidas: { max: 1 } },
            Cena: { adicionales: { max: 1 }, platos_principales: { max: 1 }, acompanantes: { max: 2 }, bebidas: { max: 1 } },
        };

        for (const [sectionName, rules] of Object.entries(sectionsValidation)) {
            const sectionOptions = selectedOptions[sectionName] || {};
            for (const [optionType, rule] of Object.entries(rules)) {
                const selectedCount = (sectionOptions[optionType] || []).length;
                if (rule.max !== undefined && selectedCount > rule.max) {
                    errors.push(`${sectionName} - ${optionType}: Máximo ${rule.max} opciones`);
                }
            }
        }

        return errors;
    };

    const showConfirmModal = () => {
        const validationErrors = validateSelections();
        if (validationErrors.length > 0) {
            Modal.error({
                title: 'Errores de Validación',
                content: (
                    <ul>
                        {validationErrors.map((error, index) => (
                            <li key={index}>{error}</li>
                        ))}
                    </ul>
                ),
            });
        } else {
            setConfirmVisible(true);
        }
    };

    const handleOk = async () => {
        setConfirmVisible(false);
        try {
            const opciones = [];
            for (const section of selectedMenu.sections) {
                for (const key in section) {
                    if (section[key] instanceof Array) {
                        section[key].forEach(option => {
                            const selected = selectedOptions[section.titulo]?.[key]?.includes(option.id) || false;
                            opciones.push({
                                id: option.id,
                                selected: selected,
                            });
                        });
                    }
                }
            }

            const pedido = {
                paciente: selectedPaciente,
                menu: selectedMenu.id,
                opciones: opciones,
                adicionales: additionalOptions,
            };

            await createPedido(pedido);
            resetForm();
        } catch (error) {
            console.error('Error creating pedido', error);
        }
    };

    const resetForm = () => {
        setSelectedPaciente(null);
        setSelectedMenu(null);
        setSelectedOptions({});
        setAdditionalOptions({
            leche: '',
            bebida: '',
            azucarPanela: [],
            vegetales: '',
            golosina: false
        });
    };

    const handleCancel = () => {
        setConfirmVisible(false);
    };

    const filterOption = (input, option) => {
        return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;
    };

    if (loading) {
        return <Spin />;
    }

    return (
        <div className="realizar-pedido">
            <h2>Realizar un Pedido</h2>
            <div className="form-item">
                <label>Paciente</label>
                <Select
                    showSearch
                    filterOption={filterOption}
                    value={selectedPaciente}
                    onChange={handlePacienteChange}
                    style={{ width: '100%' }}
                >
                    {pacientes.map(paciente => (
                        <Option key={paciente.id} value={paciente.id}>
                            {paciente.name} (Cama: {paciente.cama.nombre}, Hab: {paciente.cama.habitacion.nombre}, Serv: {paciente.cama.habitacion.servicio.nombre})
                        </Option>
                    ))}
                </Select>
            </div>
            <div className="form-item">
                <label>Menú</label>
                <Select value={selectedMenu?.id} onChange={handleMenuChange} style={{ width: '100%' }}>
                    {menus.map(menu => (
                        <Option key={menu.id} value={menu.id}>
                            {menu.nombre}
                        </Option>
                    ))}
                </Select>
            </div>
            {selectedMenu && selectedMenu.sections.map(section => (
                <Collapse key={section.id} className="section-collapse">
                    <Panel header={section.titulo}>
                        {Object.keys(section).map(key => (
                            key !== 'id' && key !== 'titulo' && section[key].length > 0 && (
                                <div key={key} className="option-group">
                                    <h4>{key.charAt(0).toUpperCase() + key.slice(1)}</h4>
                                    {section[key].map(option => (
                                        <Checkbox
                                            key={option.id}
                                            checked={selectedOptions[section.titulo]?.[key]?.includes(option.id)}
                                            onChange={e => handleOptionChange(section.titulo, key, option.id, e.target.checked)}
                                        >
                                            {option.texto}
                                        </Checkbox>
                                    ))}
                                </div>
                            )
                        ))}
                    </Panel>
                </Collapse>
            ))}
            <div className="additional-options">
                <h3>Opciones Adicionales</h3>
                <div className="form-item">
                    <label>Leche</label>
                    <Select
                        value={additionalOptions.leche}
                        onChange={value => setAdditionalOptions(prev => ({ ...prev, leche: value }))}
                        style={{ width: '100%' }}
                    >
                        <Option value="entera">Leche entera</Option>
                        <Option value="deslactosada">Leche deslactosada</Option>
                    </Select>
                </div>
                <div className="form-item">
                    <label>Bebida</label>
                    <Select
                        value={additionalOptions.bebida}
                        onChange={value => setAdditionalOptions(prev => ({ ...prev, bebida: value }))}
                        style={{ width: '100%' }}
                    >
                        <Option value="leche">Bebida en leche</Option>
                        <Option value="agua">Bebida en agua</Option>
                    </Select>
                </div>
                <div className="form-item">
                    <label>Azúcar y/o Panela</label>
                    <Checkbox.Group
                        value={additionalOptions.azucarPanela}
                        onChange={checkedValues => setAdditionalOptions(prev => ({ ...prev, azucarPanela: checkedValues }))}
                    >
                        <Checkbox value="azucar">Azúcar</Checkbox>
                        <Checkbox value="panela">Panela</Checkbox>
                    </Checkbox.Group>
                </div>
                <div className="form-item">
                    <label>Vegetales</label>
                    <Select
                        value={additionalOptions.vegetales}
                        onChange={value => setAdditionalOptions(prev => ({ ...prev, vegetales: value }))}
                        style={{ width: '100%' }}
                    >
                        <Option value="crudos">Vegetales Crudos</Option>
                        <Option value="calientes">Vegetales Calientes</Option>
                    </Select>
                </div>
                <div className="form-item">
                    <label>Golosina Opcional</label>
                    <Checkbox
                        checked={additionalOptions.golosina}
                        onChange={e => setAdditionalOptions(prev => ({ ...prev, golosina: e.target.checked }))}
                    >
                        Golosina
                    </Checkbox>
                </div>
            </div>
            <Button onClick={showConfirmModal} type="primary" className="submit-button">
                Realizar Pedido
            </Button>
            <Modal
                title="Confirmación de Pedido"
                visible={confirmVisible}
                onOk={handleOk}
                onCancel={handleCancel}
            >
                <p>
                    Pacientes con restricción de azúcares o dieta hipoglúcida no deben consumir alimentos con mermelada, galletas dulces, ni harinas adicionales.
                </p>
                <p>
                    Prima la dieta recomendada por el médico tratante con las restricciones.
                </p>
                <p>
                    Asegúrese de los elementos seleccionados según las restricciones del paciente.
                </p>
            </Modal>

            <PedidosPendientes />
            <HistorialPedidos />
        </div>
    );
};

export default RealizarPedido;
// Importamos React y el hook useState para manejar el estado del componente
import React, { useState } from 'react';
// Importamos axios para realizar solicitudes HTTP al backend
import axios from 'axios';
// Importamos el archivo de estilos SCSS específico para este componente
import '../styles/Login.scss';

// Definimos el componente Register
const Register = () => {
    // Estados para manejar los valores de los campos de entrada y los errores
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    // Función para manejar el envío del formulario de registro
    const handleRegister = async (e) => {
        e.preventDefault(); // Prevenimos el comportamiento por defecto del formulario
        try {
            // Enviamos una solicitud POST al backend para registrar un nuevo usuario
            const response = await axios.post('http://127.0.0.1:8000/api/auth/register/', {
                username,
                email,
                password
            });
            // Si la solicitud es exitosa, mostramos un mensaje en la consola
            console.log('Usuario registrado con éxito', response.data);
        } catch (error) {
            // Si hay un error, mostramos un mensaje de error en la interfaz y en la consola
            setError('El registro falló');
            console.error('Error en el registro', error.response);
        }
    };

    // Renderizamos el formulario de registro
    return (
        <div className="register-container container mt-5">
            <h2>Registro</h2>
            <form onSubmit={handleRegister}>
                <div className="form-group">
                    <input
                        type="text"
                        placeholder="Nombre de usuario"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="form-control"
                    />
                </div>
                <div className="form-group">
                    <input
                        type="email"
                        placeholder="Correo electrónico"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="form-control"
                    />
                </div>
                <div className="form-group">
                    <input
                        type="password"
                        placeholder="Contraseña"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="form-control"
                    />
                </div>
                <button type="submit" className="btn btn-primary btn-block">Registrar</button>
                {/* Mostrar mensaje de error si ocurre un fallo en el registro */}
                {error && <p className="text-danger text-center mt-2">{error}</p>}
            </form>
        </div>
    );
};

// Exportamos el componente Register para que pueda ser utilizado en otras partes de la aplicación
export default Register;
// Importamos la configuración de Axios personalizada
import api from '../axiosConfig';

// Función para registrar un usuario
export const registerUser = async (userData) => {
    const response = await api.post('/auth/register/', userData);
    return response.data;
};

// Función para iniciar sesión
export const loginUser = async (userData) => {
    const response = await api.post('/auth/login/', userData);
    return response.data;
};

// Función para obtener todos los menús
export const getMenus = async () => {
    const response = await api.get('/menus/');
    return response.data;
};

// Función para crear un nuevo menú
export const createMenu = async (menuData) => {
    const response = await api.post('/menus/', menuData);
    return response.data;
};

// Función para actualizar un menú existente
export const updateMenu = async (id, menuData) => {
    const response = await api.put(`/menus/${id}/`, menuData);
    return response.data;
};

// Función para eliminar un menú
export const deleteMenu = async (id) => {
    const response = await api.delete(`/menus/${id}/`);
    return response.data;
};

// Función para obtener todas las opciones de menú
export const getMenuOptions = async () => {
    const response = await api.get('/menus/options/');
    return response.data;
};

// Función para crear una nueva opción de menú
export const createMenuOption = async (optionData) => {
    const response = await api.post('/menus/options/', optionData);
    return response.data;
};

// Función para obtener todos los pacientes
export const getPacientes = async () => {
    const response = await api.get('/pacientes/');
    return response.data;
};

// Función para crear un nuevo paciente
export const createPaciente = async (pacienteData) => {
    const response = await api.post('/pacientes/', pacienteData);
    return response.data;
};

// Funciones CRUD para pedidos
export const getPedidos = async () => {
    const response = await api.get('/pedidos/');
    return response.data;
};

export const createPedido = async (pedidoData) => {
    const response = await api.post('/pedidos/', pedidoData);
    return response.data;
};

export const updatePedido = async (id, pedidoData) => {
    const response = await api.put(`/pedidos/${id}/`, pedidoData);
    return response.data;
};

export const deletePedido = async (id) => {
    const response = await api.delete(`/pedidos/${id}/`);
    return response.data;
};

export const getPedidosCompletados = async (searchTerm = '') => {
    const response = await api.get(`/pedidos/completados/?paciente=${searchTerm}`);
    return response.data;
};

// Función para actualizar un servicio existente (activar/desactivar)
export const updateServicio = async (id, servicioData) => {
    const response = await api.put(`/servicios/${id}/`, servicioData);
    return response.data;
};

// Función para actualizar una habitación existente (activar/desactivar)
export const updateHabitacion = async (id, habitacionData) => {
    const response = await api.put(`/habitaciones/${id}/`, habitacionData);
    return response.data;
};

// Función para actualizar un paciente existente (activar/desactivar)
export const updatePaciente = async (id, pacienteData) => {
    const response = await api.put(`/pacientes/${id}/`, pacienteData);
    return response.data;
};

// Funciones CRUD para camas
export const getCamas = async () => {
    const response = await api.get('/camas/');
    return response.data;
};

export const createCama = async (camaData) => {
    const response = await api.post('/camas/', camaData);
    return response.data;
};

export const updateCama = async (id, camaData) => {
    const response = await api.put(`/camas/${id}/`, camaData);
    return response.data;
};

export const deleteCama = async (id) => {
    const response = await api.delete(`/camas/${id}/`);
    return response.data;
};

// Exportamos la configuración de Axios por defecto
export default api;
/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos globales para el body */
body {
    /* Establecemos la fuente por defecto como 'Syne' con respaldo en sans-serif */
    font-family: 'Syne', sans-serif;
    /* Eliminamos los márgenes y el padding por defecto */
    margin: 0;
    padding: 0;
    /* Establecemos un color de fondo suave para todo el documento */
    background-color: #f8f9fa;
}

/* Estilos para los encabezados h1 */
h1 {
    /* Aplicamos el color institucional al texto del encabezado */
    color: #174288;
    /* Centramos el texto */
    text-align: center;
    /* Añadimos un margen superior para separar el encabezado del borde superior de la página */
    margin-top: 20px;
}

/* Estilos para las listas desordenadas */
ul {
    /* Eliminamos los estilos de lista predeterminados (puntos) */
    list-style-type: none;
    /* Eliminamos el padding predeterminado de las listas */
    padding: 0;

    /* Estilos para los elementos de la lista */
    li {
        /* Establecemos un fondo blanco para los elementos de la lista */
        background-color: #fff;
        /* Añadimos un borde alrededor de los elementos con un color gris claro */
        border: 1px solid #dee2e6;
        /* Añadimos un margen alrededor de cada elemento de la lista */
        margin: 10px;
        /* Añadimos un padding interno para separar el contenido del borde */
        padding: 10px;
        /* Redondeamos las esquinas de los elementos */
        border-radius: 5px;
        /* Añadimos una sombra suave para dar un efecto de elevación */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

        /* Estilos al pasar el cursor sobre los elementos de la lista */
        &:hover {
            /* Cambiamos el color del borde al color institucional al hacer hover */
            border-color: #00A7E2;
            /* Aumentamos la sombra y cambiamos su color para resaltar el elemento */
            box-shadow: 0 0 10px rgba(0, 167, 226, 0.5);
        }
    }
}
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

body {
    font-family: 'Syne', sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

h2, h3 {
    color: #2c3e50;
    margin-bottom: 20px;
    font-weight: 700;
}

h4 {
    font-weight: 700;
    color: #34495e;
    margin-bottom: 10px;
}

p {
    margin-bottom: 5px;
    font-size: 1rem;
    line-height: 1.5;
}

.section {
    margin-bottom: 40px;
}

.section h3 {
    border-bottom: 2px solid #e74c3c;
    padding-bottom: 10px;
    margin-bottom: 20px;
}

.list-group-item {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
    background-color: #fff;
}

.form-group {
    margin-bottom: 15px;
}

.form-group input,
.form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    font-family: 'Syne', sans-serif;
}

.form-control:focus {
    border-color: #3498db;
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
}

.btn-primary {
    background-color: #e74c3c;
    border-color: #e74c3c;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: 700;
    text-transform: uppercase;
    cursor: pointer;
}

.btn-primary:hover {
    background-color: #c0392b;
    border-color: #c0392b;
}

.btn-primary:focus {
    outline: none;
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.mt-5 {
    margin-top: 3rem;
}

.mb-3 {
    margin-bottom: 1rem;
}

.list-group {
    padding-left: 0;
    margin-bottom: 20px;
}

.list-group-item h4 {
    margin-bottom: 10px;
}

.list-group-item p {
    margin: 0;
}
.floating-button {
    /* Posicionamos el botón flotante en la esquina inferior derecha */
    position: fixed;
    bottom: 20px;
    right: 20px;
    /* Aseguramos que el botón esté siempre en la parte superior de otros elementos */
    z-index: 1000;

    .btn {
        /* Color de fondo institucional para el botón */
        background-color: #174288;
        /* Eliminamos el borde predeterminado */
        border: none;
        /* Tamaño de fuente grande para el ícono del botón */
        font-size: 24px;
        /* Padding interno para hacer el botón más grande y fácil de pulsar */
        padding: 15px;
        /* Hacemos el botón redondeado al 100% para darle forma circular */
        border-radius: 50%;
        /* Color blanco para el ícono dentro del botón */
        color: #fff;
        /* Transiciones suaves para el cambio de color de fondo y la transformación */
        transition: background-color 0.3s, transform 0.3s;

        /* Estilos cuando se pasa el cursor sobre el botón */
        &:hover {
            /* Cambiamos el color de fondo al color secundario cuando se hace hover */
            background-color: #00A7E2;
            /* Aumentamos ligeramente el tamaño del botón para dar un efecto de "pulso" */
            transform: scale(1.1);
        }
    }

    .floating-menu {
        /* Posicionamos el menú flotante justo encima del botón */
        position: absolute;
        bottom: 60px;
        right: 0;
        /* Fondo blanco para el menú */
        background-color: #fff;
        /* Borde gris claro alrededor del menú */
        border: 1px solid #dee2e6;
        /* Bordes redondeados para el menú */
        border-radius: 8px;
        /* Sombra suave para darle un efecto de elevación */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        /* Padding interno para dar espacio al contenido dentro del menú */
        padding: 10px;
        /* Inicialmente, el menú es invisible y totalmente transparente */
        opacity: 0;
        visibility: hidden;
        /* Transición suave para mostrar y ocultar el menú */
        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;

        /* Clase adicional para mostrar el menú */
        &.show {
            /* El menú se vuelve visible y completamente opaco */
            opacity: 1;
            visibility: visible;
        }

        .nav-link {
            /* Color institucional para los enlaces del menú */
            color: #174288;

            /* Estilos cuando se pasa el cursor sobre los enlaces */
            &:hover {
                /* Cambiamos el color del enlace al color secundario cuando se hace hover */
                color: #00A7E2;
            }
        }
    }
}

/* Media query para pantallas grandes (ancho mínimo de 992px) */
@media (min-width: 992px) {
    .floating-button {
        /* Ocultamos el botón flotante en pantallas grandes */
        display: none;
    }
}
/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos para el contenedor principal del encabezado */
.header {
    /* Aplicamos la fuente 'Syne' a todo el contenedor del encabezado */
    font-family: 'Syne', sans-serif;
    /* Establecemos el color de fondo institucional para el encabezado */
    background-color: #174288;

    /* Estilos para el botón de la barra de navegación (hamburger menu) */
    .navbar-toggler {
        /* Establecemos el color del borde del botón al color secundario */
        border-color: #00A7E2;
    }

    /* Estilos para el logotipo dentro del encabezado */
    .logo {
        /* Definimos la altura del logotipo */
        height: 50px;
        /* Añadimos un margen a la derecha para separar el logotipo de los demás elementos */
        margin-right: 15px;
    }

    /* Estilos para los enlaces de navegación dentro del encabezado */
    .nav-link {
        /* Color blanco para los enlaces de navegación */
        color: #FFFFFF;

        /* Estilos al pasar el cursor sobre los enlaces */
        &:hover {
            /* Cambiamos el color del texto al gris claro cuando se hace hover */
            color: #DEE2E6;
        }
    }

    /* Estilos adicionales para los enlaces dentro de .header-right */
    .header-right .nav-link {
        /* Color de fondo institucional para los enlaces en .header-right */
        background-color: #174288;
        /* Color blanco para el texto */
        color: #fff;
        /* Padding interno para hacer los enlaces más grandes y fáciles de pulsar */
        padding: 10px 15px;
        /* Bordes redondeados para los enlaces */
        border-radius: 5px;
        /* Transición suave para el cambio de color de fondo */
        transition: background-color 0.3s;

        /* Estilos al pasar el cursor sobre estos enlaces */
        &:hover {
            /* Cambiamos el color de fondo al color secundario cuando se hace hover */
            background-color: #00A7E2;
        }
    }
}
.historial-pedidos {
    margin-top: 40px;

    h2 {
        font-size: 20px;
        margin-bottom: 20px;
    }

    .ant-collapse-header {
        font-weight: bold;
    }

    .option-group {
        margin-bottom: 15px;
    }
}
.historial-pedidos {
    margin-top: 40px;

    h2 {
        font-size: 20px;
        margin-bottom: 20px;
    }

    .ant-collapse-header {
        font-weight: bold;
    }

    .option-group {
        margin-bottom: 15px;
    }
}
.historial-pedidos {
    margin-top: 40px;

    h2 {
        font-size: 20px;
        margin-bottom: 20px;
    }

    .ant-collapse-header {
        font-weight: bold;
    }

    .option-group {
        margin-bottom: 15px;
    }
}
/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos para el contenedor principal de la página de inicio */
.home {
    /* Aplicamos la fuente 'Syne' a todo el contenedor */
    font-family: 'Syne', sans-serif;
    /* Establecemos un color de fondo gris claro */
    background-color: #DEE2E6;
    /* Color de texto institucional azul */
    color: #174288;
    /* Padding interno para espaciar el contenido */
    padding: 50px 20px;

    /* Estilos para los encabezados h1 dentro del contenedor .home */
    h1 {
        /* Tamaño de fuente grande para el encabezado principal */
        font-size: 2.5rem;
        /* Color de texto institucional azul */
        color: #174288;
    }

    /* Media query para dispositivos con un ancho máximo de 767px (dispositivos móviles) */
    @media (max-width: 767px) {
        /* Reducimos el padding en dispositivos móviles para mejor ajuste */
        padding: 30px 10px;

        /* Ajustamos el tamaño de fuente del h1 en dispositivos móviles */
        h1 {
            font-size: 2rem;
        }
    }
}
/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos para el contenedor principal del layout */
.layout {
    /* Aplicamos la fuente 'Syne' a todo el layout */
    font-family: 'Syne', sans-serif;
    /* Aseguramos que el contenedor ocupe al menos la altura completa de la ventana */
    min-height: 100vh;
    /* Establecemos un color de fondo blanco para el layout */
    background-color: #FFFFFF;

    /* Estilos para la sección principal del contenido */
    .main-content {
        /* Hacemos que la sección principal ocupe el espacio disponible */
        flex: 1;
        /* Utilizamos flexbox para organizar los elementos internos */
        display: flex;
        /* Color de fondo gris claro para el área principal */
        background-color: #DEE2E6;

        /* Estilos para la sección específica de contenido dentro de main-content */
        .content {
            /* Hacemos que el contenido crezca para llenar el espacio disponible */
            flex-grow: 1;
            /* Añadimos padding interno para separar el contenido de los bordes */
            padding: 15px;
            /* Fondo blanco para la sección de contenido */
            background-color: #FFFFFF;
        }
    }
}

/* Media query para dispositivos con un ancho máximo de 767px (dispositivos móviles) */
@media (max-width: 767px) {
    /* Ajustes en la estructura de la sección principal en pantallas pequeñas */
    .main-content {
        /* Cambiamos la dirección de los elementos internos a una columna (de arriba hacia abajo) */
        flex-direction: column;

        /* Ajustes en el padding de la sección de contenido en pantallas pequeñas */
        .content {
            padding: 10px;
        }
    }

    /* Ocultamos la barra lateral en dispositivos móviles */
    .sidebar {
        display: none;
    }
}
/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Aplicamos la fuente 'Syne' a todo el documento */
body {
  font-family: 'Syne', sans-serif;
}

/* Estilos para la página de menús */
.menu-page {
  /* Padding para espaciar el contenido dentro de la página */
  padding: 20px;
  /* Color de fondo suave para la página */
  background-color: #f0f2f5;
}

/* Estilos para botones personalizados */
.custom-button {
  /* Color de fondo verde para los botones */
  background-color: #4caf50;
  /* Color de borde que coincide con el fondo */
  border-color: #4caf50;
  /* Color de texto blanco */
  color: white;
  /* Aplicamos la fuente 'Syne' a los botones */
  font-family: 'Syne', sans-serif;
}

/* Estilos para botones al hacer hover o focus */
.custom-button:hover,
.custom-button:focus {
  /* Cambiamos el color de fondo y borde al verde más oscuro */
  background-color: #45a049;
  border-color: #45a049;
}

/* Estilos para agrupar botones */
.button-group {
  /* Utilizamos flexbox para alinear los botones en fila */
  display: flex;
  /* Espacio entre los botones */
  gap: 10px;
}

/* Estilos para el contenedor de carga */
.loading-container {
  /* Centrar el contenido de carga horizontal y verticalmente */
  display: flex;
  justify-content: center;
  align-items: center;
  /* Ocupamos toda la altura de la ventana para centrar el contenido */
  height: 100vh;
}

/* Estilos para cada elemento de menú */
.menu-item {
  /* Margen inferior para separar los elementos de menú */
  margin-bottom: 20px;
  /* Padding interno para separar el contenido del borde */
  padding: 20px;
  /* Fondo blanco para los elementos de menú */
  background-color: white;
  /* Bordes redondeados */
  border-radius: 8px;
  /* Sombra suave para darle un efecto de elevación */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Estilos para los encabezados h3 dentro de .menu-item */
.menu-item h3 {
  /* Margen inferior para separar el encabezado del contenido siguiente */
  margin-bottom: 10px;
}

/* Estilos para los encabezados h4 dentro de .menu-item */
.menu-item h4 {
  /* Margen superior para separar el encabezado del contenido anterior */
  margin-top: 20px;
}

/* Estilos específicos para botones personalizados dentro de modales de Ant Design */
.ant-modal-footer .custom-button {
  /* Margen derecho para separar los botones en la fila */
  margin-right: 8px;
}
.menu-page {
    /* Padding para espaciar el contenido dentro de la página */
    padding: 20px;
  }
  
  .custom-button {
    /* Margen inferior para separar el botón de otros elementos */
    margin-bottom: 10px;
  }
  
  .vertical-buttons {
    /* Flexbox en dirección columna para apilar los botones verticalmente */
    display: flex;
    flex-direction: column;
    /* Espacio entre los botones */
    gap: 10px;
  }
  
  .button-group {
    /* Flexbox en dirección columna para apilar los botones verticalmente */
    display: flex;
    flex-direction: column;
    /* Espacio entre los botones */
    gap: 10px;
    /* Margen inferior para separar el grupo de botones de otros elementos */
    margin-bottom: 20px;
  }
  
  .ant-btn {
    /* Margen derecho para separar los botones en una fila */
    margin-right: 10px;
    /* Asegura que los botones ocupen todo el ancho disponible */
    width: 100%;
  }
  
  .ant-collapse-content-box {
    /* Flexbox en dirección columna para apilar el contenido verticalmente */
    display: flex;
    flex-direction: column;
    /* Espacio entre los elementos dentro del contenido colapsado */
    gap: 10px;
  }
  
  .menu-details {
    /* Estilos específicos para la tipografía dentro de los detalles del menú */
    .ant-typography {
      /* Margen superior para separar la tipografía de otros elementos */
      margin-top: 20px;
    }
  }
  
  .menu-list {
    /* Margen superior para separar la lista de menús de otros elementos */
    margin-top: 20px;
  }
  
  .loading-container {
    /* Centrar el texto de carga */
    text-align: center;
    /* Padding superior e inferior para espaciar el contenido de carga */
    padding: 50px 0;
  }
  
  .save-button {
    /* Ajusta el ancho del botón a la mitad del contenedor menos 5px */
    width: calc(50% - 5px);
    /* Margen derecho para separar el botón de otros elementos */
    margin-right: 10px;
  }
  
  .modal-footer {
    /* Flexbox para centrar los botones en la barra de pie de la ventana modal */
    display: flex;
    justify-content: center;
    /* Espacio entre los botones */
    gap: 10px;
  }
  
  .modal-footer .ant-btn {
    /* Ancho fijo para los botones dentro de la ventana modal */
    width: 100px;
    /* Margen izquierdo y derecho para espaciar los botones entre sí */
    margin: 0 10px;
  }
  
  .menu-title {
    /* Negrita para resaltar el título del menú */
    font-weight: bold;
  }
// src/components/PedidosPendientes.scss
.pedidos-pendientes {
    .pedido {
        border: 1px solid #ccc;
        margin-bottom: 20px;
        padding: 20px;
        background-color: #f9f9f9;

        .section {
            margin-bottom: 10px;

            h4 {
                color: #333;
            }

            ul {
                padding-left: 20px;

                li {
                    list-style-type: disc;
                }
            }

            button {
                padding: 10px;
                background-color: #007bff;
                color: #fff;
                border: none;
                cursor: pointer;

                &:disabled {
                    background-color: #6c757d;
                    cursor: not-allowed;
                }
            }
        }
    }
}
.realizar-pedido {
    /* Establece un ancho máximo de 600px y centra el contenedor */
    max-width: 600px;
    margin: 0 auto;
    /* Padding interno para espaciar el contenido */
    padding: 20px;
    /* Fondo blanco para el contenedor */
    background: #fff;
    /* Bordes redondeados */
    border-radius: 8px;
    /* Sombra suave para darle un efecto de elevación */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  
    h2 {
      /* Centra el texto del encabezado */
      text-align: center;
      /* Margen inferior para separar el encabezado del contenido siguiente */
      margin-bottom: 20px;
      /* Color del texto en azul institucional */
      color: #174288;
    }
  
    .form-item {
      /* Margen inferior para separar los elementos del formulario */
      margin-bottom: 20px;
    }
  
    .ant-select {
      /* Asegura que el selector ocupe todo el ancho disponible */
      width: 100%;
    }
  
    .section-collapse {
      /* Margen inferior para separar las secciones colapsables */
      margin-bottom: 20px;
    }
  
    .option-group {
      /* Utiliza flexbox en dirección columna para apilar los elementos verticalmente */
      display: flex;
      flex-direction: column;
      /* Margen izquierdo para dar sangría al grupo de opciones */
      margin-left: 20px;
  
      h4 {
        /* Margen inferior para separar el título del contenido siguiente */
        margin-bottom: 10px;
        /* Color del texto en azul institucional */
        color: #174288;
      }
  
      .ant-checkbox-wrapper {
        /* Margen inferior para separar las opciones de checkbox */
        margin-bottom: 5px;
      }
    }
  
    .additional-options {
      /* Margen superior para separar las opciones adicionales del contenido anterior */
      margin-top: 20px;
  
      .form-item {
        /* Margen inferior más pequeño para separar los elementos de las opciones adicionales */
        margin-bottom: 10px;
      }
    }
  
    .submit-button {
      /* Asegura que el botón de envío ocupe todo el ancho disponible */
      width: 100%;
    }
  }
/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos principales para la barra lateral (sidebar) */
.sidebar {
    /* Aplicamos la fuente 'Syne' a la barra lateral */
    font-family: 'Syne', sans-serif;
    /* Color de fondo azul institucional para la barra lateral */
    background-color: #174288;
    /* Color de texto blanco para el contenido de la barra lateral */
    color: #FFFFFF;
    /* Padding interno para espaciar el contenido */
    padding: 15px;

    /* Estilos para los enlaces de navegación dentro de la barra lateral */
    .nav-link {
        /* Color blanco para los enlaces */
        color: #FFFFFF;
        /* Padding interno para hacer los enlaces más grandes y accesibles */
        padding: 10px 15px;
        /* Bordes redondeados para los enlaces */
        border-radius: 4px;
        /* Margen superior e inferior para espaciar los enlaces entre sí */
        margin: 5px 0;

        /* Estilos cuando se pasa el cursor sobre los enlaces */
        &:hover {
            /* Cambiamos el color de fondo al azul secundario y el texto a gris claro */
            background-color: #00A7E2;
            color: #DEE2E6;
        }

        /* Estilos para los enlaces activos */
        &.active {
            /* Color de fondo azul secundario para el enlace activo */
            background-color: #00A7E2;
            /* Color de texto gris claro para el enlace activo */
            color: #DEE2E6;
        }
    }

    /* Estilos para pantallas pequeñas (ancho máximo de 767px) */
    @media (max-width: 767px) {
        /* Ocultamos la barra lateral en dispositivos móviles */
        display: none;
    }
}
// Importamos React y los módulos necesarios para el enrutamiento
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';

// Importamos los estilos de Bootstrap
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';

// Importamos las páginas de la aplicación
import Home from './pages/Home';
import Login from './pages/Login';
import RealizarPedido from './pages/RealizarPedido';
import DataManagement from './pages/DataManagement'; // Nuevo componente unificado
import Register from './pages/Register';
import MenuPage from './pages/MenuPage';

// Importamos los componentes de la aplicación
import Layout from './components/Layout';
import PrivateRoute from './components/PrivateRoute';

// Importamos los estilos globales de la aplicación
import './styles/App.scss';

// Definimos la función principal de la aplicación
function App() {
  return (
    // Configuramos el enrutador para manejar las rutas de la aplicación
    <Router>
      <Routes>
        {/* Ruta para la página de inicio de sesión */}
        <Route path="/login" element={<Login />} />
        
        {/* Ruta para la página de registro */}
        <Route path="/register" element={<Register />} />

        {/* Rutas protegidas que requieren autenticación */}
        <Route path="/" element={<PrivateRoute><Layout /></PrivateRoute>}>
          {/* Ruta para la página de inicio */}
          <Route path="/" element={<Home />} />
          
          {/* Ruta para la página de menús */}
          <Route path="/menus" element={<MenuPage />} />
          
          {/* Ruta para la página de realización de pedidos */}
          <Route path="/realizar-pedido" element={<RealizarPedido />} />
          
          {/* Ruta para la página de gestión de servicios, habitaciones y pacientes */}
          <Route path="/gestion-datos" element={<DataManagement />} />
        </Route>
      </Routes>
    </Router>
  );
}

// Exportamos la función App como el componente principal de la aplicación
export default App;
// Importamos axios para realizar solicitudes HTTP
import axios from 'axios';

// Creamos una instancia de axios con la URL base de la API
const api = axios.create({
    baseURL: 'http://127.0.0.1:8000/api', // URL base para las solicitudes
});

// Agregamos un interceptor de solicitudes a la instancia de axios
api.interceptors.request.use(
    (config) => {
        // Obtenemos el token de autenticación del almacenamiento local
        const token = localStorage.getItem('token');
        
        // Si el token existe, lo agregamos al encabezado de la solicitud
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        
        // Retornamos la configuración de la solicitud
        return config;
    },
    // Manejo de errores en la solicitud
    (error) => Promise.reject(error) // Rechazamos la promesa en caso de error
);

// Exportamos la instancia de axios configurada
export default api;
    