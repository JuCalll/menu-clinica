# Importamos el módulo AppConfig de Django
from django.apps import AppConfig

# Definimos la configuración de la aplicación 'authentication'
class AuthenticationConfig(AppConfig):
    # Especificamos el tipo de campo por defecto para los modelos en esta aplicación
    default_auto_field = 'django.db.models.BigAutoField'
    # Especificamos el nombre de la aplicación
    name = 'authentication'
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.db import models

class CustomUserManager(BaseUserManager):
    def create_user(self, username, email, password=None, **extra_fields):
        if not email:
            raise ValueError('El campo de correo electrónico debe estar configurado')
        email = self.normalize_email(email)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('El superusuario debe tener is_staff=True')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('El superusuario debe tener is_superuser=True')

        return self.create_user(username, email, password, **extra_fields)

class CustomUser(AbstractUser):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)  # Campo para el nombre
    cedula = models.CharField(max_length=20, unique=True)  # Campo para la cédula

    objects = CustomUserManager()

    def __str__(self):
        return self.username
from rest_framework import serializers
from .models import CustomUser

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ('id', 'username', 'password', 'email', 'name', 'cedula')
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = CustomUser.objects.create_user(**validated_data)
        return user

class LoginSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField()
from django.urls import path
from .views import RegisterView, LoginView, UserListView
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('users/', UserListView.as_view(), name='user-list'),
    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]
from django.contrib.auth import authenticate
from rest_framework import generics, permissions
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from .models import CustomUser
from .serializers import UserSerializer, LoginSerializer

class RegisterView(generics.CreateAPIView):
    queryset = CustomUser.objects.all()
    permission_classes = [permissions.IsAdminUser]
    serializer_class = UserSerializer

class LoginView(generics.GenericAPIView):
    permission_classes = (permissions.AllowAny,)
    serializer_class = LoginSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = authenticate(username=serializer.validated_data['username'], password=serializer.validated_data['password'])
        if user:
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        return Response({"error": "Credenciales inválidas"}, status=400)

class UserListView(generics.ListAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAdminUser]
# Importamos Path de pathlib para manejar rutas de archivos
from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Cargar variables de entorno desde el archivo .env
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'ZOM50YBnVo12HpKqySoeXS9M621bNTB0JJ-mqFYpzUbnTFcMWfEh_7y2iB9ZUvVz6fg')

DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'authentication',  # Aplicación de autenticación personalizada
    'pedidos',
    'pacientes',
    'camas',
    'habitaciones',
    'servicios',
    'menus',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=10),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

AUTH_USER_MODEL = 'authentication.CustomUser'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Bogota'
USE_I18N = True
USE_TZ = False

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Importamos el módulo admin de django.contrib para la administración del sitio
from django.contrib import admin
# Importamos las funciones path e include desde django.urls para definir rutas
from django.urls import path, include

# Definimos las rutas principales del proyecto
urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/auth/', include('authentication.urls')),  # Rutas de autenticación
    path('api/pacientes/', include('pacientes.urls')),
    path('api/habitaciones/', include('habitaciones.urls')),
    path('api/servicios/', include('servicios.urls')),
    path('api/menus/', include('menus.urls')),
    path('api/pedidos/', include('pedidos.urls')),
    path('api/camas/', include('camas.urls')),
    path('api/usuarios/', include('authentication.urls')),  # Nueva ruta para gestión de usuarios
]
import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import '../styles/Sidebar.scss';

const Sidebar = () => {
  const [isPedidosOpen, setIsPedidosOpen] = useState(false);
  const [isGestionDatosOpen, setIsGestionDatosOpen] = useState(false); // Nuevo estado para gestionar el submenú de Gestión de Datos

  const togglePedidosMenu = () => {
    setIsPedidosOpen(!isPedidosOpen);
  };

  const toggleGestionDatosMenu = () => {
    setIsGestionDatosOpen(!isGestionDatosOpen); // Función para alternar la apertura del submenú de Gestión de Datos
  };

  return (
    <div className="sidebar vh-100">
      <nav className="nav flex-column">
        <NavLink to="/" className="nav-link">Inicio</NavLink>
        <NavLink to="/menus" className="nav-link">Menús</NavLink>

        <div 
          className={`nav-link pedidos-toggle ${isPedidosOpen ? 'open' : ''}`} 
          onClick={togglePedidosMenu} 
          style={{ cursor: 'pointer' }}
        >
          Pedidos
        </div>
        {isPedidosOpen && (
          <div className={`submenu ${isPedidosOpen ? 'submenu-open' : ''}`}>
            <NavLink to="/realizar-pedido" className="nav-link submenu-item">Realizar Pedido</NavLink>
            <NavLink to="/pedidos/pendientes" className="nav-link submenu-item">Pedidos Pendientes</NavLink>
            <NavLink to="/pedidos/historial" className="nav-link submenu-item">Historial de Pedidos</NavLink>
          </div>
        )}

        <div 
          className={`nav-link gestion-datos-toggle ${isGestionDatosOpen ? 'open' : ''}`} 
          onClick={toggleGestionDatosMenu} 
          style={{ cursor: 'pointer' }}
        >
          Gestión de Datos
        </div>
        {isGestionDatosOpen && (
          <div className={`submenu ${isGestionDatosOpen ? 'submenu-open' : ''}`}>
            <NavLink to="/gestion-datos" className="nav-link submenu-item">Datos Generales</NavLink>
            <NavLink to="/gestion-usuarios" className="nav-link submenu-item">Gestión de Usuarios</NavLink> {/* Nuevo enlace para Gestión de Usuarios */}
          </div>
        )}
      </nav>
    </div>
  );
};

export default Sidebar;
import React, { useState, useEffect } from 'react';
import { Button, Table, Form, Input, Modal } from 'antd';
import { registerUser, getUsuarios } from '../services/api';  // Asegúrate de tener estas funciones en tu API

const UserManagement = () => {
    const [usuarios, setUsuarios] = useState([]);
    const [loading, setLoading] = useState(true);
    const [visible, setVisible] = useState(false);
    const [form] = Form.useForm();

    useEffect(() => {
        const fetchUsuarios = async () => {
            const response = await getUsuarios();
            setUsuarios(response);
            setLoading(false);
        };

        fetchUsuarios();
    }, []);

    const handleCreateUser = async (values) => {
        try {
            await registerUser(values);
            setVisible(false);
            form.resetFields();
            const response = await getUsuarios();
            setUsuarios(response);
        } catch (error) {
            console.error('Error creating user:', error);
        }
    };

    const columns = [
        { title: 'Nombre', dataIndex: 'name', key: 'name' },
        { title: 'Cédula', dataIndex: 'cedula', key: 'cedula' },
        { title: 'Usuario', dataIndex: 'username', key: 'username' },
        { title: 'Rol', dataIndex: 'role', key: 'role' },
    ];

    return (
        <div>
            <Button type="primary" onClick={() => setVisible(true)}>
                Crear Usuario
            </Button>
            <Table dataSource={usuarios} columns={columns} loading={loading} rowKey="id" />

            <Modal
                title="Crear Usuario"
                visible={visible}
                onCancel={() => setVisible(false)}
                footer={null}
            >
                <Form form={form} onFinish={handleCreateUser}>
                    <Form.Item name="name" label="Nombre" rules={[{ required: true }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="cedula" label="Cédula" rules={[{ required: true }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="username" label="Usuario" rules={[{ required: true }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="password" label="Contraseña" rules={[{ required: true }]}>
                        <Input.Password />
                    </Form.Item>
                    <Form.Item name="role" label="Rol" rules={[{ required: true }]}>
                        <Input />
                    </Form.Item>
                    <Button type="primary" htmlType="submit">
                        Crear
                    </Button>
                </Form>
            </Modal>
        </div>
    );
};

export default UserManagement;
// Importamos la configuración de Axios personalizada
import api from '../axiosConfig';

// Función para registrar un usuario
export const registerUser = async (userData) => {
    const response = await api.post('/auth/register/', userData);
    return response.data;
};

// Función para iniciar sesión
export const loginUser = async (userData) => {
    const response = await api.post('/auth/login/', userData);
    return response.data;
};

// Función para obtener todos los usuarios
export const getUsuarios = async () => {
    const response = await api.get('/auth/users/');
    return response.data;
};

// Función para crear un nuevo usuario
export const createUser = async (userData) => {
    const response = await api.post('/auth/users/', userData);
    return response.data;
};

// Función para obtener todos los menús
export const getMenus = async () => {
    const response = await api.get('/menus/');
    return response.data;
};

// Función para crear un nuevo menú
export const createMenu = async (menuData) => {
    const response = await api.post('/menus/', menuData);
    return response.data;
};

// Función para actualizar un menú existente
export const updateMenu = async (id, menuData) => {
    const response = await api.put(`/menus/${id}/`, menuData);
    return response.data;
};

// Función para eliminar un menú
export const deleteMenu = async (id) => {
    const response = await api.delete(`/menus/${id}/`);
    return response.data;
};

// Función para obtener todas las opciones de menú
export const getMenuOptions = async () => {
    const response = await api.get('/menus/options/');
    return response.data;
};

// Función para crear una nueva opción de menú
export const createMenuOption = async (optionData) => {
    const response = await api.post('/menus/options/', optionData);
    return response.data;
};

// Función para obtener todos los pacientes
export const getPacientes = async () => {
    const response = await api.get('/pacientes/');
    return response.data;
};

// Función para crear un nuevo paciente
export const createPaciente = async (pacienteData) => {
    const response = await api.post('/pacientes/', pacienteData);
    return response.data;
};

// Funciones CRUD para pedidos
export const getPedidos = async () => {
    const response = await api.get('/pedidos/');
    return response.data;
};

export const createPedido = async (pedidoData) => {
    const response = await api.post('/pedidos/', pedidoData);
    return response.data;
};

export const updatePedido = async (id, pedidoData) => {
    const response = await api.put(`/pedidos/${id}/`, pedidoData);
    return response.data;
};

export const deletePedido = async (id) => {
    const response = await api.delete(`/pedidos/${id}/`);
    return response.data;
};

export const getPedidosCompletados = async (searchTerm = '') => {
    const response = await api.get(`/pedidos/completados/?paciente=${searchTerm}`);
    return response.data;
};

// Función para actualizar un servicio existente (activar/desactivar)
export const updateServicio = async (id, servicioData) => {
    const response = await api.put(`/servicios/${id}/`, servicioData);
    return response.data;
};

// Función para crear un nuevo servicio
export const createServicio = async (servicioData) => {
    const response = await api.post('/servicios/', servicioData);
    return response.data;
};

// Función para crear una nueva habitación con camas
export const createHabitacion = async (habitacionData) => {
    const response = await api.post('/habitaciones/', habitacionData);
    return response.data;
};

// Función para actualizar una habitación existente (con camas)
export const updateHabitacion = async (id, habitacionData) => {
    const response = await api.put(`/habitaciones/${id}/`, habitacionData);
    return response.data;
};

// Función para obtener todas las camas
export const getCamas = async () => {
    const response = await api.get('/camas/');
    return response.data;
};

// Función para crear una nueva cama
export const createCama = async (camaData) => {
    const response = await api.post('/camas/', camaData);
    return response.data;
};

// Función para actualizar una cama existente
export const updateCama = async (id, camaData) => {
    const response = await api.put(`/camas/${id}/`, camaData);
    return response.data;
};

// Función para eliminar una cama
export const deleteCama = async (id) => {
    const response = await api.delete(`/camas/${id}/`);
    return response.data;
};

// Función para actualizar un paciente existente (activar/desactivar)
export const updatePaciente = async (id, pacienteData) => {
    const response = await api.put(`/pacientes/${id}/`, pacienteData);
    return response.data;
};

// Exportamos la configuración de Axios por defecto
export default api;
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';

// Importación de las páginas
import Home from './pages/Home';
import Login from './pages/Login';
import RealizarPedido from './pages/RealizarPedido';
import DataManagement from './pages/DataManagement';
import Register from './pages/Register';
import MenuPage from './pages/MenuPage';
import PedidosPendientes from './pages/PedidosPendientes';
import HistorialPedidos from './pages/HistorialPedidos';
import UserManagement from './pages/UserManagement';  // Nueva importación de la página de gestión de usuarios

// Importación de componentes
import Layout from './components/Layout';
import PrivateRoute from './components/PrivateRoute';

// Importación de estilos
import './styles/App.scss';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />

        <Route path="/" element={<PrivateRoute><Layout /></PrivateRoute>}>
          <Route path="/" element={<Home />} />
          <Route path="/menus" element={<MenuPage />} />
          <Route path="/realizar-pedido" element={<RealizarPedido />} />
          <Route path="/pedidos/pendientes" element={<PedidosPendientes />} />
          <Route path="/pedidos/historial" element={<HistorialPedidos />} />
          <Route path="/gestion-datos" element={<DataManagement />} />
          <Route path="/gestion-usuarios" element={<UserManagement />} />  {/* Nueva ruta para la gestión de usuarios */}
        </Route>
      </Routes>
    </Router>
  );
}

export default App;
// UserManagement.scss

.user-management {
    padding: 20px;
  
    .ant-form {
      margin-bottom: 20px;
  
      .ant-form-item {
        margin-right: 10px;
      }
    }
  
    .ant-table {
      margin-top: 20px;
    }
  }
  


   "username": "newadmin",
    "password": "AdminPassword123!"