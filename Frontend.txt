frontend:

src:
    assets:

    components:
        FloatingButton.js:

            import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import { FaBars } from 'react-icons/fa';
import '../styles/FloatingButton.scss';

const FloatingButton = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [isPedidosOpen, setIsPedidosOpen] = useState(false);
    const userRole = localStorage.getItem('role');  // Obtener el rol del usuario

    const toggleMenu = () => {
        setIsOpen(!isOpen);
    };

    const togglePedidosMenu = () => {
        setIsPedidosOpen(!isPedidosOpen);
    };

    return (
        <div className="floating-button">
            <button className="btn" onClick={toggleMenu}>
                <FaBars />
            </button>

            <div className={`floating-menu ${isOpen ? 'show' : ''}`}>
                <NavLink to="/" className="nav-link" onClick={toggleMenu}>Inicio</NavLink>

                {/* Menús visible solo para admin y coordinador */}
                {(userRole === 'admin' || userRole === 'coordinador') && (
                    <NavLink to="/menus" className="nav-link" onClick={toggleMenu}>Menús</NavLink>
                )}

                {(userRole === 'admin' || userRole === 'coordinador' || userRole === 'auxiliar' || userRole === 'jefe_enfermeria') && (
                    <>
                        <div 
                            className={`nav-link pedidos-toggle ${isPedidosOpen ? 'open' : ''}`} 
                            onClick={togglePedidosMenu} 
                            style={{ cursor: 'pointer' }}
                        >
                            Pedidos
                        </div>
                        {isPedidosOpen && (
                            <div className={`submenu ${isPedidosOpen ? 'submenu-open' : ''}`}>
                                {/* Realizar Pedido visible para admin, jefe de enfermería y coordinador */}
                                {(userRole === 'admin' || userRole === 'jefe_enfermeria' || userRole === 'coordinador') && (
                                    <NavLink to="/realizar-pedido" className="nav-link submenu-item" onClick={toggleMenu}>Realizar Pedido</NavLink>
                                )}
                                {/* Pedidos Pendientes e Historial visible para admin, coordinador y auxiliar */}
                                {(userRole === 'admin' || userRole === 'coordinador' || userRole === 'auxiliar') && (
                                    <>
                                        <NavLink to="/pedidos/pendientes" className="nav-link submenu-item" onClick={toggleMenu}>Pedidos Pendientes</NavLink>
                                        <NavLink to="/pedidos/historial" className="nav-link submenu-item" onClick={toggleMenu}>Historial de Pedidos</NavLink>
                                    </>
                                )}
                            </div>
                        )}
                    </>
                )}

                {(userRole === 'admin' || userRole === 'jefe_enfermeria') && (
                    <NavLink to="/gestion-datos" className="nav-link" onClick={toggleMenu}>Gestión de Datos</NavLink>
                )}

                {userRole === 'admin' && (
                    <NavLink to="/gestion-usuarios" className="nav-link" onClick={toggleMenu}>Gestión de Usuarios</NavLink>
                )}
            </div>
        </div>
    );
};

export default FloatingButton;


        Header.js:

// Importamos React para crear componentes
import React from 'react';
// Importamos Link desde react-router-dom para manejar la navegación entre páginas
import { Link } from 'react-router-dom';
// Importamos el archivo de estilos SCSS para este componente
import '../styles/Header.scss';
// Importamos el logo de la aplicación desde la carpeta assets
import logo from '../assets/logo.png';

// Definimos el componente Header
const Header = () => {
    // Función para manejar el cierre de sesión
    const handleLogout = () => {
        // Removemos el token de autenticación del almacenamiento local (localStorage)
        localStorage.removeItem('token');
    };

    // Renderizamos el encabezado (header) de la aplicación
    return (
        <header className="header navbar navbar-expand-lg navbar-dark bg-primary">
            <div className="container d-flex justify-content-between align-items-center">
                {/* Sección izquierda del encabezado con el logo */}
                <div className="header-left d-flex align-items-center">
                    <img src={logo} alt="Logo" className="logo" />
                </div>
                {/* Sección derecha del encabezado con el enlace para cerrar sesión */}
                <div className="header-right">
                    {/* Enlace para cerrar sesión, que redirige a la página de login y ejecuta handleLogout */}
                    <Link to="/login" className="nav-link" onClick={handleLogout}>Cerrar sesión</Link>
                </div>
            </div>
        </header>
    );
};

// Exportamos el componente Header para que pueda ser utilizado en otras partes de la aplicación
export default Header;


        Layout.js:

// Importamos React para crear componentes
import React from 'react';
// Importamos los componentes Header, Sidebar y FloatingButton
import Header from './Header';
import Sidebar from './Sidebar';
import FloatingButton from './FloatingButton'; 
// Importamos Outlet desde react-router-dom para renderizar sub-rutas dentro del componente principal
import { Outlet } from 'react-router-dom';
// Importamos el archivo de estilos SCSS para este componente
import '../styles/Layout.scss';

// Definimos el componente Layout que organiza la estructura de la aplicación
const Layout = () => {
    return (
        <div className="layout d-flex flex-column">
            {/* Componente Header en la parte superior */}
            <Header />
            
            {/* Contenedor principal que incluye la barra lateral y el contenido principal */}
            <div className="main-content d-flex flex-grow-1">
                {/* Componente Sidebar en el lado izquierdo */}
                <Sidebar />
                
                {/* Contenedor para el contenido principal de la página */}
                <div className="content flex-grow-1 p-3">
                    {/* Outlet se usa para renderizar las rutas secundarias que cambian según la navegación */}
                    <Outlet />
                </div>
            </div>
            
            {/* Botón flotante para navegación rápida */}
            <FloatingButton /> 
        </div>
    );
};

// Exportamos el componente Layout para que pueda ser utilizado en otras partes de la aplicación
export default Layout;


        Sidebar.js:

import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import '../styles/Sidebar.scss';

const Sidebar = () => {
  const [isPedidosOpen, setIsPedidosOpen] = useState(false);
  const [isGestionDatosOpen, setIsGestionDatosOpen] = useState(false);
  const userRole = localStorage.getItem('role');  // Obtener el rol del usuario

  const togglePedidosMenu = () => {
    setIsPedidosOpen(!isPedidosOpen);
  };

  const toggleGestionDatosMenu = () => {
    setIsGestionDatosOpen(!isGestionDatosOpen);
  };

  return (
    <div className="sidebar vh-100">
      <nav className="nav flex-column">
        <NavLink to="/" className="nav-link">Inicio</NavLink>
        
        {/* Menús visible solo para admin y coordinador */}
        {(userRole === 'admin' || userRole === 'coordinador') && (
          <NavLink to="/menus" className="nav-link">Menús</NavLink>
        )}

        {(userRole === 'admin' || userRole === 'coordinador' || userRole === 'auxiliar' || userRole === 'jefe_enfermeria') && (
          <>
            <div 
              className={`nav-link pedidos-toggle ${isPedidosOpen ? 'open' : ''}`} 
              onClick={togglePedidosMenu} 
              style={{ cursor: 'pointer' }}
            >
              Pedidos
            </div>
            {isPedidosOpen && (
              <div className={`submenu ${isPedidosOpen ? 'submenu-open' : ''}`}>
                {/* Realizar Pedido visible para admin, jefe de enfermería y coordinador */}
                {(userRole === 'admin' || userRole === 'jefe_enfermeria' || userRole === 'coordinador') && (
                  <NavLink to="/realizar-pedido" className="nav-link submenu-item">Realizar Pedido</NavLink>
                )}
                {/* Pedidos Pendientes e Historial visible para admin, coordinador y auxiliar */}
                {(userRole === 'admin' || userRole === 'coordinador' || userRole === 'auxiliar') && (
                  <>
                    <NavLink to="/pedidos/pendientes" className="nav-link submenu-item">Pedidos Pendientes</NavLink>
                    <NavLink to="/pedidos/historial" className="nav-link submenu-item">Historial de Pedidos</NavLink>
                  </>
                )}
              </div>
            )}
          </>
        )}

        {(userRole === 'admin' || userRole === 'jefe_enfermeria') && (
          <>
            <div 
              className={`nav-link gestion-datos-toggle ${isGestionDatosOpen ? 'open' : ''}`} 
              onClick={toggleGestionDatosMenu} 
              style={{ cursor: 'pointer' }}
            >
              Gestión de Datos
            </div>
            {isGestionDatosOpen && (
              <div className={`submenu ${isGestionDatosOpen ? 'submenu-open' : ''}`}>
                {/* Datos Generales visible para admin y jefe de enfermería */}
                {(userRole === 'admin' || userRole === 'jefe_enfermeria') && (
                  <NavLink to="/gestion-datos" className="nav-link submenu-item">Datos Generales</NavLink>
                )}
                {/* Gestión de Usuarios visible solo para admin */}
                {userRole === 'admin' && (
                  <NavLink to="/gestion-usuarios" className="nav-link submenu-item">Gestión de Usuarios</NavLink>
                )}
              </div>
            )}
          </>
        )}
      </nav>
    </div>
  );
};

export default Sidebar;


    pages:
        DataManagement.js:

import React, { useState, useEffect } from 'react';
import { Button, Drawer, Tabs, Table, Switch, Modal, Form, Input, notification, Select, Collapse } from 'antd';
import api, { createServicio, createHabitacion, createCama, createPaciente } from '../services/api';  // Importamos las nuevas funciones
import '../styles/DataManagement.scss';

const { TabPane } = Tabs;
const { Option } = Select;
const { Panel } = Collapse;
const { confirm } = Modal;

const DataManagement = () => {
    const [pacientes, setPacientes] = useState([]);
    const [servicios, setServicios] = useState([]);
    const [habitaciones, setHabitaciones] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isDrawerOpen, setIsDrawerOpen] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false); // Estado para el modal de creación de servicios
    const [isHabitacionModalOpen, setIsHabitacionModalOpen] = useState(false); // Estado para el modal de creación de habitaciones
    const [isCamaModalOpen, setIsCamaModalOpen] = useState(false); // Estado para el modal de creación de camas
    const [isPacienteModalOpen, setIsPacienteModalOpen] = useState(false); // Estado para el modal de creación de pacientes
    const [newServicioName, setNewServicioName] = useState(''); // Estado para el nombre del nuevo servicio
    const [newHabitacionName, setNewHabitacionName] = useState(''); // Estado para el nombre de la nueva habitación
    const [newCamaName, setNewCamaName] = useState(''); // Estado para el nombre de la nueva cama
    const [newPacienteID, setNewPacienteID] = useState(''); // Estado para la cédula del nuevo paciente
    const [newPacienteName, setNewPacienteName] = useState(''); // Estado para el nombre del nuevo paciente
    const [newRecommendedDiet, setNewRecommendedDiet] = useState(''); // Estado para la dieta recomendada del nuevo paciente
    const [selectedServicio, setSelectedServicio] = useState(null); // Estado para el servicio seleccionado al crear una habitación
    const [selectedHabitacion, setSelectedHabitacion] = useState(null); // Estado para la habitación seleccionada al crear una cama
    const [selectedCama, setSelectedCama] = useState(null); // Estado para la cama seleccionada al crear un paciente

    const userRole = localStorage.getItem('role');  // Obtener el rol del usuario

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [pacientesResponse, serviciosResponse, habitacionesResponse] = await Promise.all([
                    api.get('/pacientes/'),
                    api.get('/servicios/'),
                    api.get('/habitaciones/')
                ]);

                setPacientes(pacientesResponse.data);
                setServicios(serviciosResponse.data);
                setHabitaciones(habitacionesResponse.data);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching data:', error);
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const openDrawer = () => setIsDrawerOpen(true);
    const closeDrawer = () => setIsDrawerOpen(false);

    const toggleActivo = async (item, type) => {
        const showConfirm = (isActivating) => {
            let title = '';
            let content = '';

            if (isActivating) {
                switch (type) {
                    case 'servicios':
                        title = '¿Estás seguro de que deseas activar este servicio?';
                        content = 'Esta acción activará el servicio y permitirá activar habitaciones y camas relacionadas a él.';
                        break;
                    case 'habitaciones':
                        title = '¿Estás seguro de que deseas activar esta habitación?';
                        content = 'Esta acción activará la habitación y permitirá activar las camas relacionadas a ella.';
                        break;
                    case 'camas':
                        title = '¿Estás seguro de que deseas activar esta cama?';
                        content = 'Esta acción activará la cama para ser asignada a un paciente.';
                        break;
                    case 'pacientes':
                        title = '¿Estás seguro de que deseas activar a este paciente?';
                        content = 'Esta acción activará al paciente y asignará su cama asociada.';
                        break;
                    default:
                        title = '¿Estás seguro de que deseas continuar?';
                        content = 'Esta acción cambiará el estado del elemento seleccionado a activo.';
                        break;
                }
            } else {
                switch (type) {
                    case 'servicios':
                        title = '¿Estás seguro de que deseas desactivar este servicio?';
                        content = 'Esta acción desactivará el servicio y todas las habitaciones y camas asociadas a él. El servicio permanecerá en la base de datos como inactivo.';
                        break;
                    case 'habitaciones':
                        title = '¿Estás seguro de que deseas desactivar esta habitación?';
                        content = 'Esta acción desactivará la habitación y todas las camas asociadas a ella. La habitación permanecerá en la base de datos como inactiva.';
                        break;
                    case 'camas':
                        title = '¿Estás seguro de que deseas desactivar esta cama?';
                        content = 'Esta acción desactivará la cama y quedará disponible para ser asignada a un nuevo paciente. La cama permanecerá en la base de datos como inactiva.';
                        break;
                    case 'pacientes':
                        title = '¿Estás seguro de que deseas desactivar a este paciente?';
                        content = 'Esta acción desactivará al paciente y liberará su cama asociada. El paciente permanecerá en la base de datos como inactivo.';
                        break;
                    default:
                        title = '¿Estás seguro de que deseas continuar?';
                        content = 'Esta acción cambiará el estado del elemento seleccionado a inactivo.';
                        break;
                }
            }

            confirm({
                title: title,
                content: content,
                onOk: async () => {
                    try {
                        console.log("Datos antes de actualizar:", item);

                        const updatedItem = { ...item, activo: !item.activo };

                        if (type === 'habitaciones') {
                            let servicioId = item.servicio_id;
                            if (!servicioId) {
                                const servicio = servicios.find(s => s.nombre === item.servicio);
                                if (servicio) {
                                    servicioId = servicio.id;
                                }
                            }
                            updatedItem.servicio_id = servicioId;
                            console.log("Servicio ID extraído:", updatedItem.servicio_id);
                        }

                        if (type === 'camas') {
                            const habitacion = habitaciones.find(h => h.id === item.habitacion);
                            console.log("Habitación encontrada:", habitacion);
                            if (!habitacion || !habitacion.activo) {
                                alert("No se puede activar la cama porque la habitación no está activa.");
                                return;
                            }

                            updatedItem.habitacion_id = habitacion.id;
                            console.log("Habitación ID extraído:", updatedItem.habitacion_id);
                        }

                        if (type === 'pacientes') {
                            const cama = item.cama ? item.cama : null;
                            console.log("Cama obtenida:", cama);

                            if (!cama) {
                                console.error("Error: No se encontró la cama asociada al paciente.");
                                return;
                            }

                            const habitacion = cama.habitacion ? cama.habitacion : null;
                            console.log("Habitación obtenida desde cama:", habitacion);

                            if (!habitacion) {
                                console.error("Error: No se encontró la habitación asociada a la cama.");
                                return;
                            }

                            const servicio = habitacion.servicio ? habitacion.servicio : null;
                            console.log("Servicio obtenido desde habitación:", servicio);

                            if (!servicio) {
                                console.error("Error: No se encontró el servicio asociado a la habitación.");
                                return;
                            }

                            // Verificación de estados
                            const camaActiva = cama.activo !== undefined ? cama.activo : "no definido";
                            const habitacionActiva = habitacion.activo !== undefined ? habitacion.activo : "no definido";
                            const servicioActivo = servicio.activo !== undefined ? servicio.activo : "no definido";

                            console.log("Estado de cama:", camaActiva);
                            console.log("Estado de habitación:", habitacionActiva);
                            console.log("Estado de servicio:", servicioActivo);

                            if (camaActiva === null || habitacionActiva === null || servicioActivo === null) {
                                console.error("Error: Estado indefinido para cama, habitación o servicio.");
                                return;
                            }

                            if (!camaActiva || !habitacionActiva || !servicioActivo) {
                                alert("No se puede activar el paciente porque la cama, habitación o servicio no están activos.");
                                return;
                            }

                            updatedItem.cama_id = cama.id;
                            console.log("Cama ID extraído:", updatedItem.cama_id);
                        }

                        const response = await api.put(`/${type}/${item.id}/`, updatedItem);
                        console.log("Respuesta del backend:", response.data);
                        refreshData();
                    } catch (error) {
                        if (error.response && error.response.status === 400) {
                            const errorMessage = error.response.data.detail || "No se puede activar el paciente debido a restricciones en la lógica de activación.";
                            alert(`Error: ${errorMessage}`);
                        } else {
                            console.error('Error toggling activo:', error.response ? error.response.data : error);
                        }
                    }
                },
                onCancel() {
                    console.log('Acción cancelada por el usuario');
                },
            });
        };

        if (item.activo) {
            showConfirm(false);  // Mostrar la confirmación para desactivar
        } else {
            showConfirm(true);  // Mostrar la confirmación para activar
        }
    };

    const refreshData = async () => {
        setLoading(true);
        try {
            const [pacientesResponse, serviciosResponse, habitacionesResponse] = await Promise.all([
                api.get('/pacientes/'),
                api.get('/servicios/'),
                api.get('/habitaciones/')
            ]);

            setPacientes(pacientesResponse.data);
            setServicios(serviciosResponse.data);
            setHabitaciones(habitacionesResponse.data);
            setLoading(false);
        } catch (error) {
            console.error('Error fetching data:', error);
            setLoading(false);
        }
    };

    // Nueva función para manejar la creación de un servicio
    const handleCreateServicio = async () => {
        if (!newServicioName) {
            notification.error({ message: 'Error', description: 'El nombre del servicio es obligatorio' });
            return;
        }

        try {
            await createServicio({ nombre: newServicioName });
            notification.success({ message: 'Servicio creado exitosamente' });
            setIsModalOpen(false);
            setNewServicioName('');
            refreshData(); // Refrescamos la lista de servicios
        } catch (error) {
            notification.error({ message: 'Error al crear el servicio', description: error.response?.data?.message || error.message });
        }
    };

    // Nueva función para manejar la creación de una habitación
    const handleCreateHabitacion = async () => {
        if (!newHabitacionName || !selectedServicio) {
            notification.error({ message: 'Error', description: 'El nombre de la habitación y la selección de un servicio son obligatorios' });
            return;
        }

        try {
            const payload = {
                nombre: newHabitacionName,
                servicio_id: selectedServicio,
                activo: false,
                camas: []
            };

            await createHabitacion(payload);
            notification.success({ message: 'Habitación creada exitosamente' });
            setIsHabitacionModalOpen(false);
            setNewHabitacionName('');
            setSelectedServicio(null);
            refreshData();
        } catch (error) {
            notification.error({ message: 'Error al crear la habitación', description: error.response?.data?.message || error.message });
        }
    };

    // Nueva función para manejar la creación de una cama
    const handleCreateCama = async () => {
        if (!newCamaName || !selectedHabitacion) {
            notification.error({ message: 'Error', description: 'El nombre de la cama y la selección de una habitación son obligatorios' });
            return;
        }

        try {
            const payload = {
                nombre: newCamaName,
                habitacion: selectedHabitacion,
                activo: false
            };

            await createCama(payload);
            notification.success({ message: 'Cama creada exitosamente' });
            setIsCamaModalOpen(false);
            setNewCamaName('');
            setSelectedHabitacion(null);
            refreshData();
        } catch (error) {
            notification.error({ message: 'Error al crear la cama', description: error.response?.data?.message || error.message });
        }
    };

    // Nueva función para manejar la creación de un paciente
    const handleCreatePaciente = async () => {
        if (!newPacienteID || !newPacienteName || !selectedCama || !newRecommendedDiet) {
            notification.error({ message: 'Error', description: 'Todos los campos son obligatorios para crear un paciente' });
            return;
        }

        try {
            const payload = {
                cedula: newPacienteID,  // Ahora enviamos la cédula en lugar de `id`
                name: newPacienteName,
                cama_id: selectedCama,  // "cama_id" sigue siendo correcto
                recommended_diet: newRecommendedDiet,
                activo: true // Por defecto, el paciente se crea como activo
            };

            await createPaciente(payload);
            notification.success({ message: 'Paciente creado exitosamente' });
            setIsPacienteModalOpen(false);
            setNewPacienteID('');
            setNewPacienteName('');
            setNewRecommendedDiet('');
            setSelectedCama(null);
            refreshData();
        } catch (error) {
            notification.error({ message: 'Error al crear el paciente', description: error.response?.data?.message || error.message });
        }
    };


    // Nueva función para abrir el modal de creación de servicios
    const openCreateServicioModal = () => {
        setIsModalOpen(true);
    };

    // Nueva función para cerrar el modal de creación de servicios
    const closeCreateServicioModal = () => {
        setIsModalOpen(false);
        setNewServicioName('');
    };

    // Nueva función para abrir el modal de creación de habitaciones
    const openCreateHabitacionModal = () => {
        const activeServices = servicios.filter(s => s.activo);
        if (activeServices.length === 0) {
            notification.warning({ message: 'Advertencia', description: 'No se pueden crear habitaciones porque no hay servicios activos' });
            return;
        }
        setIsHabitacionModalOpen(true);
    };

    // Nueva función para cerrar el modal de creación de habitaciones
    const closeCreateHabitacionModal = () => {
        setIsHabitacionModalOpen(false);
        setNewHabitacionName('');
        setSelectedServicio(null);
    };

    // Nueva función para abrir el modal de creación de camas
    const openCreateCamaModal = () => {
        const activeHabitaciones = habitaciones.filter(h => h.activo);
        if (activeHabitaciones.length === 0) {
            notification.warning({ message: 'Advertencia', description: 'No se pueden crear camas porque no hay habitaciones activas' });
            return;
        }
        setIsCamaModalOpen(true);
    };

    // Nueva función para cerrar el modal de creación de camas
    const closeCreateCamaModal = () => {
        setIsCamaModalOpen(false);
        setNewCamaName('');
        setSelectedHabitacion(null);
    };

    // Nueva función para abrir el modal de creación de pacientes
    const openCreatePacienteModal = () => {
        // Filtrar camas activas que no tengan un paciente asociado
        const activeCamas = habitaciones.flatMap(h => h.camas.filter(c => c.activo && !pacientes.some(p => p.cama.id === c.id)));
        if (activeCamas.length === 0) {
            notification.warning({ message: 'Advertencia', description: 'No se pueden crear pacientes porque no hay camas disponibles sin pacientes' });
            return;
        }
        setIsPacienteModalOpen(true);
    };

    // Nueva función para cerrar el modal de creación de pacientes
    const closeCreatePacienteModal = () => {
        setIsPacienteModalOpen(false);
        setNewPacienteID('');
        setNewPacienteName('');
        setNewRecommendedDiet('');
        setSelectedCama(null);
    };

    if (loading) {
        return <div>Cargando...</div>;
    }

    return (
        <div className="data-management container mt-5">
            <h2>Gestión de Pacientes, Servicios y Habitaciones</h2>

            <Button type="primary" onClick={openDrawer}>
                Panel de Gestión
            </Button>

            <Drawer
                title="Gestión de Datos"
                placement="right"
                onClose={closeDrawer}
                open={isDrawerOpen}
                width={600}
            >
                <Tabs defaultActiveKey="1">
                    {/* Mostrar solo la pestaña de "Servicios" si el usuario no es Jefe de Enfermería */}
                    {userRole !== 'jefe_enfermeria' && (
                        <TabPane tab="Servicios" key="1">
                            <Button type="primary" onClick={openCreateServicioModal} style={{ marginBottom: '20px' }}>
                                Crear Servicio
                            </Button>
                            <Table
                                dataSource={servicios}
                                columns={[
                                    { title: 'Nombre', dataIndex: 'nombre', key: 'nombre' },
                                    {
                                        title: 'Activo',
                                        key: 'activo',
                                        render: (_, record) => (
                                            <Switch
                                                checked={record.activo}
                                                onChange={() => toggleActivo(record, 'servicios')}
                                            />
                                        ),
                                    }
                                ]}
                                rowKey="id"
                                scroll={{ x: 10 }} // Añadir scroll lateral
                            />

                            {/* Modal para crear un nuevo servicio */}
                            <Modal
                                title="Crear Nuevo Servicio"
                                open={isModalOpen}
                                onOk={handleCreateServicio}
                                onCancel={closeCreateServicioModal}
                                okText="Crear"
                                cancelText="Cancelar"
                            >
                                <Form layout="vertical">
                                    <Form.Item label="Nombre del Servicio">
                                        <Input
                                            value={newServicioName}
                                            onChange={e => setNewServicioName(e.target.value)}
                                            placeholder="Ingrese el nombre del servicio"
                                        />
                                    </Form.Item>
                                </Form>
                            </Modal>
                        </TabPane>
                    )}

                    {/* Mostrar solo la pestaña de "Habitaciones" si el usuario no es Jefe de Enfermería */}
                    {userRole !== 'jefe_enfermeria' && (
                        <TabPane tab="Habitaciones" key="2">
                            <Button type="primary" onClick={openCreateHabitacionModal} style={{ marginBottom: '20px' }}>
                                Crear Habitación
                            </Button>
                            <Button type="primary" onClick={openCreateCamaModal} style={{ marginBottom: '20px' }}>
                                Crear Cama
                            </Button>
                            <Table
                                dataSource={habitaciones}
                                columns={[
                                    { title: 'Nombre', dataIndex: 'nombre', key: 'nombre' },
                                    { title: 'Servicio', dataIndex: 'servicio', key: 'servicio' },
                                    {
                                        title: 'Camas',
                                        key: 'camas',
                                        render: (_, habitacion) => (
                                            <ul>
                                                {habitacion.camas.map(cama => (
                                                    <li key={cama.id}>
                                                        {cama.nombre}
                                                        <Switch
                                                            checked={cama.activo}
                                                            onChange={() => toggleActivo(cama, 'camas')}
                                                            style={{ marginLeft: 8 }}
                                                        />
                                                    </li>
                                                ))}
                                            </ul>
                                        )
                                    },
                                    {
                                        title: 'Activo',
                                        key: 'activo',
                                        render: (_, record) => (
                                            <Switch
                                                checked={record.activo}
                                                onChange={() => toggleActivo(record, 'habitaciones')}
                                            />
                                        ),
                                    }
                                ]}
                                rowKey="id"
                                scroll={{ x: 10 }} // Añadir scroll lateral
                            />

                            {/* Modal para crear una nueva habitación */}
                            <Modal
                                title="Crear Nueva Habitación"
                                open={isHabitacionModalOpen}
                                onOk={handleCreateHabitacion}
                                onCancel={closeCreateHabitacionModal}
                                okText="Crear"
                                cancelText="Cancelar"
                            >
                                <Form layout="vertical">
                                    <Form.Item label="Nombre de la Habitación">
                                        <Input
                                            value={newHabitacionName}
                                            onChange={e => setNewHabitacionName(e.target.value)}
                                            placeholder="Ingrese el nombre de la habitación"
                                        />
                                    </Form.Item>
                                    <Form.Item label="Servicio">
                                        <Select
                                            value={selectedServicio}
                                            onChange={value => setSelectedServicio(value)}
                                            placeholder="Seleccione un servicio"
                                        >
                                            {servicios.filter(s => s.activo).map(servicio => (
                                                <Option key={servicio.id} value={servicio.id}>
                                                    {servicio.nombre}
                                                </Option>
                                            ))}
                                        </Select>
                                    </Form.Item>
                                </Form>
                            </Modal>

                            {/* Modal para crear una nueva cama */}
                            <Modal
                                title="Crear Nueva Cama"
                                open={isCamaModalOpen}
                                onOk={handleCreateCama}
                                onCancel={closeCreateCamaModal}
                                okText="Crear"
                                cancelText="Cancelar"
                            >
                                <Form layout="vertical">
                                    <Form.Item label="Nombre de la Cama">
                                        <Input
                                            value={newCamaName}
                                            onChange={e => setNewCamaName(e.target.value)}
                                            placeholder="Ingrese el nombre de la cama"
                                        />
                                    </Form.Item>
                                    <Form.Item label="Habitación">
                                        <Select
                                            value={selectedHabitacion}
                                            onChange={value => setSelectedHabitacion(value)}
                                            placeholder="Seleccione una habitación"
                                        >
                                            {habitaciones.filter(h => h.activo).map(habitacion => (
                                                <Option key={habitacion.id} value={habitacion.id}>
                                                    {habitacion.nombre}
                                                </Option>
                                            ))}
                                        </Select>
                                    </Form.Item>
                                </Form>
                            </Modal>
                        </TabPane>
                    )}

                    {/* La pestaña de "Pacientes" siempre está disponible */}
                    <TabPane tab="Pacientes" key="3">
                        <Button type="primary" onClick={openCreatePacienteModal} style={{ marginBottom: '20px' }}>
                            Crear Paciente
                        </Button>
                        <Table
                            dataSource={pacientes}
                            columns={[
                                { title: 'Cédula', dataIndex: 'cedula', key: 'cedula' },
                                { title: 'Nombre', dataIndex: 'name', key: 'name' },
                                { title: 'Cama', dataIndex: ['cama', 'nombre'], key: 'cama' },
                                { title: 'Habitación', dataIndex: ['cama', 'habitacion', 'nombre'], key: 'habitacion' },
                                { title: 'Servicio', dataIndex: ['cama', 'habitacion', 'servicio', 'nombre'], key: 'servicio' },
                                { title: 'Dieta Recomendada', dataIndex: 'recommended_diet', key: 'recommended_diet' },
                                {
                                    title: 'Activo',
                                    key: 'activo',
                                    align: 'center',
                                    render: (_, record) => (
                                        <Switch
                                            checked={record.activo}
                                            onChange={() => toggleActivo(record, 'pacientes')}
                                        />
                                    ),
                                }
                            ]}
                            rowKey="id"
                            scroll={{ x: 10 }} // Añadir scroll lateral
                        />

                        {/* Modal para crear un nuevo paciente */}
                        <Modal
                            title="Crear Nuevo Paciente"
                            open={isPacienteModalOpen}
                            onOk={handleCreatePaciente}
                            onCancel={closeCreatePacienteModal}
                            okText="Crear"
                            cancelText="Cancelar"
                        >
                            <Form layout="vertical">
                                <Form.Item label="Cédula">
                                    <Input
                                        value={newPacienteID}
                                        onChange={e => setNewPacienteID(e.target.value)}
                                        placeholder="Ingrese la cédula del paciente"
                                    />
                                </Form.Item>
                                <Form.Item label="Nombre">
                                    <Input
                                        value={newPacienteName}
                                        onChange={e => setNewPacienteName(e.target.value)}
                                        placeholder="Ingrese el nombre del paciente"
                                    />
                                </Form.Item>
                                <Form.Item label="Cama">
                                    <Select
                                        value={selectedCama}
                                        onChange={value => setSelectedCama(value)}
                                        placeholder="Seleccione una cama"
                                    >
                                        {habitaciones.flatMap(h => h.camas.filter(c => c.activo && !pacientes.some(p => p.cama.id === c.id))).map(cama => (
                                            <Option key={cama.id} value={cama.id}>
                                                {cama.nombre}
                                            </Option>
                                        ))}
                                    </Select>
                                </Form.Item>
                                <Form.Item label="Dieta Recomendada">
                                    <Input
                                        value={newRecommendedDiet}
                                        onChange={e => setNewRecommendedDiet(e.target.value)}
                                        placeholder="Ingrese la dieta recomendada"
                                    />
                                </Form.Item>
                            </Form>
                        </Modal>
                    </TabPane>
                </Tabs>
            </Drawer>

            {/* Visualización de Elementos Activos en la Página Principal */}
            <div className="active-data mt-4">
                <h3>Servicios Activos</h3>
                <ul className="list-group mb-4">
                    {servicios.filter(s => s.activo).map(servicio => (
                        <li key={servicio.id} className="list-group-item">
                            {servicio.nombre}
                        </li>
                    ))}
                </ul>

                <h3>Habitaciones Activas</h3>
                <ul className="list-group mb-4">
                    {habitaciones.filter(h => h.activo).map(habitacion => (
                        <li key={habitacion.id} className="list-group-item">
                            {habitacion.nombre} - {habitacion.servicio}
                            <ul>
                                {habitacion.camas.map(cama => (
                                    cama.activo && (
                                        <li key={cama.id}>
                                            {cama.nombre}
                                        </li>
                                    )
                                ))}
                            </ul>
                        </li>
                    ))}
                </ul>

                <h3>Pacientes Activos</h3>
                <Collapse>
                    {pacientes.filter(p => p.activo).map(paciente => (
                        <Panel
                            header={`${paciente.name} - Habitación: ${paciente.cama.habitacion.nombre} - Servicio: ${paciente.cama.habitacion.servicio.nombre}`}
                            key={paciente.id}
                        >
                            <p><strong>Cédula:</strong> {paciente.cedula}</p>
                            <p><strong>Cama:</strong> {paciente.cama.nombre}</p>
                            <p><strong>Habitación:</strong> {paciente.cama.habitacion.nombre}</p>
                            <p><strong>Servicio:</strong> {paciente.cama.habitacion.servicio.nombre}</p>
                            <p><strong>Dieta Recomendada:</strong> {paciente.recommended_diet}</p>
                            <p><strong>Registrado en:</strong> {paciente.created_at}</p>
                        </Panel>
                    ))}
                </Collapse>
            </div>
        </div>
    );
};

export default DataManagement;

        HistorialPedidos.js

import React, { useState, useEffect } from 'react';
import { Collapse, Spin, Select } from 'antd';
import { getPacientes, getPedidosCompletados } from '../services/api';
import '../styles/HistorialPedidos.scss';

const { Panel } = Collapse;
const { Option } = Select;

const HistorialPedidos = () => {
    const [pacientes, setPacientes] = useState([]);
    const [pedidosCompletados, setPedidosCompletados] = useState([]);
    const [loading, setLoading] = useState(false);
    const [selectedPaciente, setSelectedPaciente] = useState(null);

    useEffect(() => {
        const fetchPacientes = async () => {
            try {
                const response = await getPacientes();
                console.log('Pacientes:', response); // Log para ver los pacientes obtenidos
                setPacientes(response);
            } catch (error) {
                console.error('Error fetching patients', error);
            }
        };

        fetchPacientes();
    }, []);

    useEffect(() => {
        const fetchPedidosCompletados = async () => {
            if (!selectedPaciente) {
                setPedidosCompletados([]);
                return;
            }

            setLoading(true);
            try {
                console.log('Fetching pedidos completados for paciente ID:', selectedPaciente); // Log para ver la solicitud de pedidos completados
                const response = await getPedidosCompletados(selectedPaciente);
                console.log('Pedidos Completados:', response); // Log para ver los pedidos completados
                setPedidosCompletados(response);
            } catch (error) {
                console.error('Error fetching completed orders', error);
            }
            setLoading(false);
        };

        fetchPedidosCompletados();
    }, [selectedPaciente]);

    const handlePacienteChange = (value) => {
        console.log('Paciente seleccionado:', value); // Log para ver el paciente seleccionado
        setSelectedPaciente(value);
    };

    const filterOption = (input, option) => {
        return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;
    };

    if (loading) {
        return <Spin />;
    }

    const renderSections = (pedido) => {
        console.log('Rendering sections for pedido:', pedido); // Log para ver el pedido y sus secciones
        const sectionsToShow = {
            'Adicional': ['adicionales'],
            'Algo': ['adicionales', 'bebidas'],
            'Onces': ['adicionales'],
            'Desayuno': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Almuerzo': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Cena': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas']
        };

        return pedido.menu.sections.map(section => {
            const optionsToRender = sectionsToShow[section.titulo];
            console.log('Section:', section, 'Options to render:', optionsToRender); // Log para ver cada sección y sus opciones
            return optionsToRender && optionsToRender.length > 0 ? (
                <div key={section.id}>
                    <h4>{section.titulo}</h4>
                    {optionsToRender.map(optionType => (
                        <div key={optionType}>
                            <h5>{optionType.charAt(0).toUpperCase() + optionType.slice(1)}</h5>
                            {section[optionType].map(option => (
                                <div key={option.id}>
                                    {option.texto}
                                </div>
                            ))}
                        </div>
                    ))}
                </div>
            ) : null;
        });
    };

    return (
        <div className="historial-pedidos">
            <h2>Historial de Pedidos Completados</h2>
            <Select
                showSearch
                placeholder="Seleccionar Paciente"
                value={selectedPaciente}
                onChange={handlePacienteChange}
                style={{ width: 300, marginBottom: 20 }}
                filterOption={filterOption}
            >
                {pacientes.map(paciente => (
                    <Option key={paciente.id} value={paciente.id}>
                        {paciente.name} (Cama: {paciente.cama.nombre}, Hab: {paciente.cama.habitacion.nombre}, Serv: {paciente.cama.habitacion.servicio.nombre})
                    </Option>
                ))}
            </Select>

            {pedidosCompletados.length > 0 ? (
                <Collapse>
                    {pedidosCompletados.map(pedido => (
                        <Panel header={`Pedido ${pedido.id} - ${pedido.paciente.name}`} key={pedido.id}>
                            <h4>Fecha del Pedido: {new Date(pedido.fecha_pedido).toLocaleString()}</h4>
                            {renderSections(pedido)}
                            <div className="adicionales">
                                <h4>Opciones Adicionales del Menú</h4>
                                <div>Leche: {pedido.adicionales.leche}</div>
                                <div>Bebida: {pedido.adicionales.bebida}</div>
                                <div>Azúcar/Panela: {pedido.adicionales.azucarPanela.join(', ')}</div>
                                <div>Vegetales: {pedido.adicionales.vegetales}</div>
                                <div>Golosina: {pedido.adicionales.golosina ? 'Sí' : 'No'}</div>
                            </div>
                        </Panel>
                    ))}
                </Collapse>
            ) : (
                <p>No hay pedidos completados para este paciente.</p>
            )}
        </div>
    );
};

export default HistorialPedidos;


        Home.js:

// Importamos React para crear componentes
import React from 'react';
// Importamos el archivo de estilos SCSS específico para este componente
import '../styles/Home.scss';

// Definimos el componente Home que representa la página de inicio
const Home = () => {
    return (
        // Contenedor principal con la clase "home" para aplicar estilos específicos
        // "text-center" es una clase de Bootstrap para centrar el texto
        <div className="home text-center">
            {/* Título de la página de inicio */}
            <h1>Menú Preferencial - Clínica San Juan de Dios</h1>
        </div>
    );
};

// Exportamos el componente Home para que pueda ser utilizado en otras partes de la aplicación
export default Home;


        Login.js:

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import '../styles/Login.scss';

const Login = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    const navigate = useNavigate();

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
            // Realiza la petición al backend
            const response = await api.post('/auth/login/', { username, password });

            // Log para verificar la respuesta completa
            console.log('Response completa:', response);

            // Extrae el token de acceso y el rol del usuario de la respuesta
            const token = response.data.access;
            const role = response.data.user.role; // Suponiendo que el rol viene dentro de `user` en la respuesta

            if (token && role) {
                // Guarda el token y el rol en localStorage
                localStorage.setItem('token', token);
                localStorage.setItem('role', role);

                // Redirige al usuario a la página de inicio
                navigate('/');
            } else {
                // Si no se encuentra el token o el rol en la respuesta, muestra un error
                setError('Login failed: Invalid response from server.');
            }
        } catch (error) {
            // Log para verificar el error
            console.error('Error al intentar iniciar sesión:', error);

            // Muestra un mensaje de error
            setError('Login failed');
        }
    };

    return (
        <div className="login-container container mt-5">
            <h2>Login</h2>
            <form onSubmit={handleLogin}>
                <div className="form-group">
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="form-control"
                    />
                </div>
                <div className="form-group">
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="form-control"
                    />
                </div>
                <button type="submit" className="btn btn-primary btn-block">Login</button>
                {error && <p className="text-danger text-center mt-2">{error}</p>}
            </form>
        </div>
    );
};

export default Login;


        MenuPage.js:

// Importamos React y los hooks useState y useEffect para manejar el estado y efectos
import React, { useState, useEffect } from 'react';
// Importamos varios componentes y utilidades desde Ant Design
import { Button, Modal, Form, Input, notification, Spin, Alert, List, Typography, Collapse } from 'antd';
// Importamos varios íconos desde Ant Design
import { PlusOutlined, DeleteOutlined, EyeOutlined, EditOutlined, ExclamationCircleOutlined } from '@ant-design/icons';
// Importamos funciones API para manejar las operaciones CRUD de menús
import { createMenu, getMenus, deleteMenu, updateMenu } from '../services/api';
// Importamos los estilos SCSS para este componente
import '../styles/Menus.scss';

// Desestructuramos componentes desde Ant Design para un acceso más limpio
const { Title } = Typography;
const { Panel } = Collapse;
const { confirm } = Modal;

// Definimos el componente MenuPage
const MenuPage = () => {
    // Estados para manejar la visibilidad de modales, el nombre del menú, el menú actual, y las opciones del menú
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
    const [menuName, setMenuName] = useState('');
    const [currentMenu, setCurrentMenu] = useState(null);
    const [options, setOptions] = useState({
        adicional: { adicionales: [] },
        algo: { adicionales: [], bebidas: [] },
        onces: { adicionales: [] },
        desayuno: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        almuerzo: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        cena: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
    });
    const [newOptionText, setNewOptionText] = useState('');
    const [currentOptionType, setCurrentOptionType] = useState({});
    const [isOptionModalOpen, setIsOptionModalOpen] = useState(false);
    const [menus, setMenus] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Función para mostrar el modal de creación/edición de menús
    const showModal = () => {
        setIsModalOpen(true);
        setCurrentMenu(null);
        setMenuName('');
        setOptions({
            adicional: { adicionales: [] },
            algo: { adicionales: [], bebidas: [] },
            onces: { adicionales: [] },
            desayuno: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            almuerzo: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            cena: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        });
    };

    // Función para mostrar el modal de detalles del menú
    const showDetailModal = (menu) => {
        setCurrentMenu(menu);
        setIsDetailModalOpen(true);
    };

    // Función para manejar la creación o actualización de un menú
    const handleOk = async () => {
        if (!menuName) {
            notification.error({ message: 'Error', description: 'El nombre del menú es obligatorio' });
            return;
        }

        const sections = Object.keys(options).map(key => {
            if (key === 'adicional') {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || []
                };
            } else if (key === 'algo') {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || [],
                    bebidas: options[key].bebidas.map(({ id, ...rest }) => rest) || []
                };
            } else if (key === 'onces') {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || []
                };
            } else {
                return {
                    titulo: key.charAt(0).toUpperCase() + key.slice(1),
                    adicionales: options[key].adicionales.map(({ id, ...rest }) => rest) || [],
                    platos_principales: options[key].platos_principales.map(({ id, ...rest }) => rest) || [],
                    acompanantes: options[key].acompanantes.map(({ id, ...rest }) => rest) || [],
                    bebidas: options[key].bebidas.map(({ id, ...rest }) => rest) || [],
                };
            }
        });

        // Verificación de al menos dos opciones por sección
        for (let section of sections) {
            if (section.adicionales && section.adicionales.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Adicionales` });
                return;
            }
            if (section.platos_principales && section.platos_principales.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Platos Principales` });
                return;
            }
            if (section.acompanantes && section.acompanantes.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Acompañantes` });
                return;
            }
            if (section.bebidas && section.bebidas.length < 2) {
                notification.error({ message: 'Error', description: `La sección ${section.titulo} debe tener al menos dos opciones en Bebidas` });
                return;
            }
        }

        const payload = {
            nombre: menuName,
            sections
        };

        console.log('Payload:', JSON.stringify(payload, null, 2));

        try {
            let response;
            if (currentMenu) {
                response = await updateMenu(currentMenu.id, payload);
                notification.success({ message: 'Menú actualizado exitosamente' });
            } else {
                response = await createMenu(payload);
                notification.success({ message: 'Menú creado exitosamente' });
            }
            console.log('Response:', response);
            setIsModalOpen(false);
            fetchMenus();
        } catch (error) {
            console.error('Error:', error.response?.data?.message || error.message);
            notification.error({ message: 'Error al crear/actualizar el menú', description: error.response?.data?.message || error.message });
        }
    };

    // Función para cancelar el modal y limpiar los estados
    const handleCancel = () => {
        setIsModalOpen(false);
        setIsDetailModalOpen(false);
        setCurrentMenu(null);
        setMenuName('');
        setOptions({
            adicional: { adicionales: [] },
            algo: { adicionales: [], bebidas: [] },
            onces: { adicionales: [] },
            desayuno: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            almuerzo: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
            cena: { adicionales: [], platos_principales: [], acompanantes: [], bebidas: [] },
        });
    };

    // Función para abrir el modal de opciones para una sección específica
    const openOptionModal = (section, type) => {
        setCurrentOptionType({ section, type });
        setNewOptionText('');
        setIsOptionModalOpen(true);
    };

    // Función para agregar una nueva opción a una sección
    const handleAddOption = () => {
        if (!newOptionText) {
            notification.error({ message: 'Error', description: 'Debe ingresar un texto para la opción' });
            return;
        }

        setOptions(prev => {
            const newOptions = { ...prev };
            newOptions[currentOptionType.section][currentOptionType.type].push({ texto: newOptionText, tipo: currentOptionType.type });
            return newOptions;
        });

        setIsOptionModalOpen(false);
    };

    // Función para eliminar una opción de una sección específica
    const removeOption = (section, type, index) => {
        setOptions(prev => {
            const newOptions = { ...prev };
            newOptions[section][type].splice(index, 1);
            return newOptions;
        });
    };

    // Función para obtener los menús desde el servidor
    const fetchMenus = async () => {
        setLoading(true);
        setError(null);
        try {
            const data = await getMenus();
            setMenus(data);
            console.log('Fetched menus:', data);
        } catch (error) {
            setError('Error fetching menus: ' + error.message);
        } finally {
            setLoading(false);
        }
    };

    // Función para manejar la eliminación de un menú
    const handleDeleteMenu = async (id) => {
        confirm({
            title: '¿Está seguro de que desea eliminar este menú?',
            icon: <ExclamationCircleOutlined />,
            content: 'Esta acción no se puede deshacer',
            okText: 'Sí',
            okType: 'danger',
            cancelText: 'No',
            onOk: async () => {
                try {
                    await deleteMenu(id);
                    notification.success({ message: 'Menú eliminado exitosamente' });
                    fetchMenus();
                } catch (error) {
                    notification.error({ message: 'Error al eliminar el menú', description: error.response?.data?.message || error.message });
                }
            },
        });
    };

    // Función para manejar la edición de un menú existente
    const handleEditMenu = (menu) => {
        setCurrentMenu(menu);
        setMenuName(menu.nombre);
        setOptions(menu.sections.reduce((acc, section) => {
            acc[section.titulo.toLowerCase()] = {
                adicionales: section.adicionales || [],
                platos_principales: section.platos_principales || [],
                acompanantes: section.acompanantes || [],
                bebidas: section.bebidas || []
            };
            return acc;
        }, {}));
        setIsModalOpen(true);
        console.log('Editing menu:', menu);
    };

    // Efecto para obtener los menús al cargar el componente
    useEffect(() => {
        fetchMenus();
    }, []);

    return (
        <div className="menu-page">
            <Title level={2}>Menús</Title>
            <Button className="custom-button" type="primary" onClick={showModal} icon={<PlusOutlined />}>
                Crear Menú
            </Button>
            <Modal
                title={currentMenu ? "Editar Menú" : "Crear Menú"}
                open={isModalOpen}
                onOk={handleOk}
                onCancel={handleCancel}
                footer={
                    <div className="modal-footer">
                        <Button key="back" className="custom-button save-button" onClick={handleCancel}>
                            Cancelar
                        </Button>
                        <Button key="submit" type="primary" className="custom-button save-button" onClick={handleOk}>
                            {currentMenu ? "Actualizar Menú" : "Guardar Menú"}
                        </Button>
                    </div>
                }
            >
                <Form layout="vertical">
                    <Form.Item label="Nombre del Menú">
                        <Input value={menuName} onChange={e => setMenuName(e.target.value)} />
                    </Form.Item>
                    <Collapse>
                        {['adicional', 'algo', 'onces'].map(section => (
                            <Panel header={section.charAt(0).toUpperCase() + section.slice(1)} key={section}>
                                <div className="button-group vertical-buttons">
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'adicionales')} icon={<PlusOutlined />}>
                                        Agregar Adicional
                                    </Button>
                                    {section === 'algo' && (
                                        <Button className="custom-button" onClick={() => openOptionModal(section, 'bebidas')} icon={<PlusOutlined />}>
                                            Agregar Bebida
                                        </Button>
                                    )}
                                </div>
                                <List
                                    header={<div>Adicionales</div>}
                                    bordered
                                    dataSource={options[section]?.adicionales || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'adicionales', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                {section === 'algo' && (
                                    <List
                                        header={<div>Bebidas</div>}
                                        bordered
                                        dataSource={options[section]?.bebidas || []}
                                        renderItem={(opt, index) => (
                                            <List.Item
                                                actions={[
                                                    <Button
                                                        type="link"
                                                        icon={<DeleteOutlined />}
                                                        onClick={() => removeOption(section, 'bebidas', index)}
                                                    />
                                                ]}
                                            >
                                                {opt.texto}
                                            </List.Item>
                                        )}
                                    />
                                )}
                            </Panel>
                        ))}
                        {['desayuno', 'almuerzo', 'cena'].map(section => (
                            <Panel header={section.charAt(0).toUpperCase() + section.slice(1)} key={section}>
                                <div className="button-group vertical-buttons">
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'adicionales')} icon={<PlusOutlined />}>
                                        Agregar Adicional
                                    </Button>
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'platos_principales')} icon={<PlusOutlined />}>
                                        Agregar Plato Principal
                                    </Button>
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'acompanantes')} icon={<PlusOutlined />}>
                                        Agregar Acompañante
                                    </Button>
                                    <Button className="custom-button" onClick={() => openOptionModal(section, 'bebidas')} icon={<PlusOutlined />}>
                                        Agregar Bebida
                                    </Button>
                                </div>
                                <List
                                    header={<div>Adicionales</div>}
                                    bordered
                                    dataSource={options[section]?.adicionales || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'adicionales', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                <List
                                    header={<div>Platos Principales</div>}
                                    bordered
                                    dataSource={options[section]?.platos_principales || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'platos_principales', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                <List
                                    header={<div>Acompañantes</div>}
                                    bordered
                                    dataSource={options[section]?.acompanantes || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'acompanantes', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                                <List
                                    header={<div>Bebidas</div>}
                                    bordered
                                    dataSource={options[section]?.bebidas || []}
                                    renderItem={(opt, index) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<DeleteOutlined />}
                                                    onClick={() => removeOption(section, 'bebidas', index)}
                                                />
                                            ]}
                                        >
                                            {opt.texto}
                                        </List.Item>
                                    )}
                                />
                            </Panel>
                        ))}
                    </Collapse>
                </Form>
            </Modal>

            <Modal
                title="Añadir opción"
                open={isOptionModalOpen}
                onOk={handleAddOption}
                onCancel={() => setIsOptionModalOpen(false)}
                footer={
                    <div className="modal-footer">
                        <Button key="back" className="custom-button save-button" onClick={() => setIsOptionModalOpen(false)}>
                            Cancelar
                        </Button>
                        <Button key="submit" type="primary" className="custom-button save-button" onClick={handleAddOption}>
                            OK
                        </Button>
                    </div>
                }
            >
                <Form layout="vertical">
                    <Form.Item label={`Añadir ${currentOptionType.type}`}>
                        <Input value={newOptionText} onChange={e => setNewOptionText(e.target.value)} />
                    </Form.Item>
                </Form>
            </Modal>

            <Modal
                title="Detalles del Menú"
                open={isDetailModalOpen}
                onOk={() => setIsDetailModalOpen(false)}
                onCancel={() => setIsDetailModalOpen(false)}
                footer={[
                    <Button key="back" className="custom-button save-button" onClick={() => setIsDetailModalOpen(false)}>
                        Cerrar
                    </Button>,
                ]}
            >
                {currentMenu && (
                    <div className="menu-details">
                        <Title level={3}>{currentMenu.nombre}</Title>
                        {currentMenu.sections.map(section => (
                            <div key={section.id}>
                                <Title level={4}>{section.titulo}</Title>
                                {section.adicionales?.length > 0 && (
                                    <>
                                        <Title level={5}>Adicionales</Title>
                                        <List
                                            bordered
                                            dataSource={section.adicionales}
                                            renderItem={adicional => <List.Item>{adicional.texto}</List.Item>}
                                        />
                                    </>
                                )}
                                {section.platos_principales?.length > 0 && (
                                    <>
                                        <Title level={5}>Platos Principales</Title>
                                        <List
                                            bordered
                                            dataSource={section.platos_principales}
                                            renderItem={plato => <List.Item>{plato.texto}</List.Item>}
                                        />
                                    </>
                                )}
                                {section.acompanantes?.length > 0 && (
                                    <>
                                        <Title level={5}>Acompañantes</Title>
                                        <List
                                            bordered
                                            dataSource={section.acompanantes}
                                            renderItem={acompanante => <List.Item>{acompanante.texto}</List.Item>}
                                        />
                                    </>
                                )}
                                {section.bebidas?.length > 0 && (
                                    <>
                                        <Title level={5}>Bebidas</Title>
                                        <List
                                            bordered
                                            dataSource={section.bebidas}
                                            renderItem={bebida => <List.Item>{bebida.texto}</List.Item>}
                                        />
                                    </>
                                )}
                            </div>
                        ))}
                    </div>
                )}
            </Modal>

            <div className="menu-list">
                {loading ? (
                    <div className="loading-container">
                        <Spin tip="Cargando menús..." />
                    </div>
                ) : error ? (
                    <Alert message="Error" description={error} type="error" />
                ) : menus.length > 0 ? (
                    <List
                        itemLayout="horizontal"
                        dataSource={menus}
                        renderItem={menu => (
                            <List.Item
                                actions={[
                                    <Button type="link" icon={<EyeOutlined />} onClick={() => showDetailModal(menu)} />,
                                    <Button type="link" icon={<EditOutlined />} onClick={() => handleEditMenu(menu)} />,
                                    <Button type="link" icon={<DeleteOutlined />} onClick={() => handleDeleteMenu(menu.id)} />
                                ]}
                            >
                                <List.Item.Meta
                                    title={<span className="menu-title">{menu.nombre}</span>}
                                />
                            </List.Item>
                        )}
                    />
                ) : (
                    <p>No hay menús disponibles.</p>
                )}
            </div>
        </div>
    );
};

export default MenuPage;


        PedidosPendientes.js:

import React, { useState, useEffect } from 'react';
import { Button, Spin, Collapse } from 'antd';
import { getPedidos, updatePedido } from '../services/api';
import '../styles/PedidosPendientes.scss';
import api from '../axiosConfig';

const { Panel } = Collapse;

const PedidosPendientes = () => {
    const [pedidos, setPedidos] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchPedidos = async () => {
            try {
                const response = await getPedidos();
                setPedidos(response.filter(pedido => pedido.status !== 'completado'));
                setLoading(false);
            } catch (error) {
                console.error('Error fetching pedidos', error);
                setLoading(false);
            }
        };

        fetchPedidos();
    }, []);

    const handleSectionStatusChange = async (pedidoId, sectionTitle) => {
        try {
            const pedido = pedidos.find(p => p.id === pedidoId);

            const updatedSections = { ...pedido.sectionStatus, [sectionTitle]: 'completado' };

            const allSectionsCompleted = Object.values(updatedSections).length === pedido.menu.sections.length &&
                                         Object.values(updatedSections).every(status => status === 'completado');

            const updatedPedido = {
                ...pedido,
                status: allSectionsCompleted ? 'completado' : 'en_proceso',
                sectionStatus: updatedSections,
            };

            await updatePedido(pedidoId, updatedPedido);

            setPedidos(prevPedidos =>
                prevPedidos.map(p =>
                    p.id === pedidoId
                        ? { ...p, sectionStatus: updatedSections, status: updatedPedido.status }
                        : p
                ).filter(p => p.status !== 'completado')
            );

        } catch (error) {
            console.error('Error updating section status', error);
        }
    };

    const handlePrint = async (pedido) => {
        const url = `/pedidos/${pedido.id}/print/`;
        console.log("URL de la solicitud:", url);
    
        try {
            const response = await api.post(url);
    
            console.log("Respuesta completa:", response);
    
            if (response.status === 200) {
                console.log("Pedido impreso con éxito.");
            } else {
                console.error("Error al intentar imprimir el pedido:", response.status, response.statusText);
            }
        } catch (error) {
            console.error("Error al intentar imprimir el pedido:", error);
        }
    };            
    
    if (loading) {
        return <Spin />;
    }

    const renderSections = (pedido) => {
        const sectionsToShow = {
            'Adicional': ['adicionales'],
            'Algo': ['adicionales', 'bebidas'],
            'Onces': ['adicionales'],
            'Desayuno': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Almuerzo': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas'],
            'Cena': ['adicionales', 'platos_principales', 'acompanantes', 'bebidas']
        };

        return pedido.menu.sections.map(section => {
            const optionsToRender = sectionsToShow[section.titulo];

            return optionsToRender && optionsToRender.length > 0 ? (
                <div key={section.id}>
                    <h4>{section.titulo}</h4>
                    {optionsToRender.map(optionType => (
                        <div key={optionType}>
                            <h5>{optionType.charAt(0).toUpperCase() + optionType.slice(1)}</h5>
                            {section[optionType].map(option => (
                                <div key={option.id}>
                                    {option.texto}
                                </div>
                            ))}
                        </div>
                    ))}
                    <Button
                        onClick={() => handleSectionStatusChange(pedido.id, section.titulo)}
                        disabled={pedido.sectionStatus?.[section.titulo] === 'completado'}
                    >
                        {pedido.sectionStatus?.[section.titulo] === 'completado' ? 'Completado' : 'Marcar como Completado'}
                    </Button>
                </div>
            ) : null;
        });
    };

    return (
        <div className="pedidos-pendientes">
            <h2>Pedidos Pendientes</h2>
            <Collapse>
                {pedidos.length > 0 ? (
                    pedidos.map(pedido => (
                        <Panel header={`Pedido ${pedido.id} - ${pedido.paciente.name}`} key={pedido.id}>
                            {renderSections(pedido)}
                            <div>
                                <h4>Opciones Adicionales del Menú</h4>
                                <div>Leche: {pedido.adicionales.leche}</div>
                                <div>Bebida: {pedido.adicionales.bebida}</div>
                                <div>Azúcar/Panela: {pedido.adicionales.azucarPanela.join(', ')}</div>
                                <div>Vegetales: {pedido.adicionales.vegetales}</div>
                                <div>Golosina: {pedido.adicionales.golosina ? 'Sí' : 'No'}</div>
                            </div>
                            <Button onClick={() => handlePrint(pedido)}>Imprimir</Button>
                        </Panel>
                    ))
                ) : (
                    <p>No hay pedidos pendientes.</p>
                )}
            </Collapse>
        </div>
    );
};

export default PedidosPendientes;


        RealizarPedidos.js:

import React, { useEffect, useState } from 'react';
import { Select, Button, Checkbox, Spin, Collapse, Modal } from 'antd';
import { getPacientes, getMenus, createPedido } from '../services/api';
import '../styles/RealizarPedido.scss';

const { Option } = Select;
const { Panel } = Collapse;

const RealizarPedido = () => {
    const [pacientes, setPacientes] = useState([]);
    const [menus, setMenus] = useState([]);
    const [selectedPaciente, setSelectedPaciente] = useState(null);
    const [selectedMenu, setSelectedMenu] = useState(null);
    const [selectedOptions, setSelectedOptions] = useState({});
    const [additionalOptions, setAdditionalOptions] = useState({
        leche: '',
        bebida: '',
        azucarPanela: [],
        vegetales: '',
        golosina: false
    });
    const [loading, setLoading] = useState(true);
    const [confirmVisible, setConfirmVisible] = useState(false);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const pacientesResponse = await getPacientes();
                const menusResponse = await getMenus();
                setPacientes(pacientesResponse);
                setMenus(menusResponse);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching data', error);
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const handlePacienteChange = value => {
        setSelectedPaciente(value);
    };

    const handleMenuChange = value => {
        const menu = menus.find(menu => menu.id === value);
        setSelectedMenu(menu);
        setSelectedOptions({});
    };

    const handleOptionChange = (sectionName, optionType, optionId, checked) => {
        setSelectedOptions(prevOptions => {
            const newOptions = { ...prevOptions };

            if (!newOptions[sectionName]) {
                newOptions[sectionName] = {};
            }

            if (!newOptions[sectionName][optionType]) {
                newOptions[sectionName][optionType] = [];
            }

            if (checked) {
                if (optionType === 'acompanantes') {
                    if (newOptions[sectionName][optionType].length < 2) {
                        newOptions[sectionName][optionType].push(optionId);
                    }
                } else {
                    newOptions[sectionName][optionType] = [optionId];
                }
            } else {
                newOptions[sectionName][optionType] = newOptions[sectionName][optionType].filter(id => id !== optionId);
            }

            return newOptions;
        });
    };

    const validateSelections = () => {
        const errors = [];

        const sectionsValidation = {
            Adicional: { adicionales: { max: 1 } },
            Algo: { adicionales: { max: 1 }, bebidas: { max: 1 } },
            Onces: { adicionales: { max: 1 } },
            Desayuno: { adicionales: { max: 1 }, platos_principales: { max: 1 }, acompanantes: { max: 2 }, bebidas: { max: 1 } },
            Almuerzo: { adicionales: { max: 1 }, platos_principales: { max: 1 }, acompanantes: { max: 2 }, bebidas: { max: 1 } },
            Cena: { adicionales: { max: 1 }, platos_principales: { max: 1 }, acompanantes: { max: 2 }, bebidas: { max: 1 } },
        };

        for (const [sectionName, rules] of Object.entries(sectionsValidation)) {
            const sectionOptions = selectedOptions[sectionName] || {};
            for (const [optionType, rule] of Object.entries(rules)) {
                const selectedCount = (sectionOptions[optionType] || []).length;
                if (rule.max !== undefined && selectedCount > rule.max) {
                    errors.push(`${sectionName} - ${optionType}: Máximo ${rule.max} opciones`);
                }
            }
        }

        return errors;
    };

    const showConfirmModal = () => {
        const validationErrors = validateSelections();
        if (validationErrors.length > 0) {
            Modal.error({
                title: 'Errores de Validación',
                content: (
                    <ul>
                        {validationErrors.map((error, index) => (
                            <li key={index}>{error}</li>
                        ))}
                    </ul>
                ),
            });
        } else {
            setConfirmVisible(true);
        }
    };

    const handleOk = async () => {
        setConfirmVisible(false);
        try {
            const opciones = [];
            for (const section of selectedMenu.sections) {
                for (const key in section) {
                    if (section[key] instanceof Array) {
                        section[key].forEach(option => {
                            const selected = selectedOptions[section.titulo]?.[key]?.includes(option.id) || false;
                            opciones.push({
                                id: option.id,
                                selected: selected,
                            });
                        });
                    }
                }
            }

            const pedido = {
                paciente: selectedPaciente,
                menu: selectedMenu.id,
                opciones: opciones,
                adicionales: additionalOptions,
            };

            await createPedido(pedido);
            resetForm();
        } catch (error) {
            console.error('Error creating pedido', error);
        }
    };

    const resetForm = () => {
        setSelectedPaciente(null);
        setSelectedMenu(null);
        setSelectedOptions({});
        setAdditionalOptions({
            leche: '',
            bebida: '',
            azucarPanela: [],
            vegetales: '',
            golosina: false
        });
    };

    const handleCancel = () => {
        setConfirmVisible(false);
    };

    const filterOption = (input, option) => {
        return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;
    };

    if (loading) {
        return <Spin />;
    }

    return (
        <div className="realizar-pedido">
            <h2>Realizar un Pedido</h2>
            <div className="form-item">
                <label>Paciente</label>
                <Select
                    showSearch
                    filterOption={filterOption}
                    value={selectedPaciente}
                    onChange={handlePacienteChange}
                    style={{ width: '100%' }}
                >
                    {pacientes.map(paciente => (
                        <Option key={paciente.id} value={paciente.id}>
                            {paciente.name} (Cama: {paciente.cama.nombre}, Hab: {paciente.cama.habitacion.nombre}, Serv: {paciente.cama.habitacion.servicio.nombre})
                        </Option>
                    ))}
                </Select>
            </div>
            <div className="form-item">
                <label>Menú</label>
                <Select value={selectedMenu?.id} onChange={handleMenuChange} style={{ width: '100%' }}>
                    {menus.map(menu => (
                        <Option key={menu.id} value={menu.id}>
                            {menu.nombre}
                        </Option>
                    ))}
                </Select>
            </div>
            {selectedMenu && selectedMenu.sections.map(section => (
                <Collapse key={section.id} className="section-collapse">
                    <Panel header={section.titulo}>
                        {Object.keys(section).map(key => (
                            key !== 'id' && key !== 'titulo' && section[key].length > 0 && (
                                <div key={key} className="option-group">
                                    <h4>{key.charAt(0).toUpperCase() + key.slice(1)}</h4>
                                    {section[key].map(option => (
                                        <Checkbox
                                            key={option.id}
                                            checked={selectedOptions[section.titulo]?.[key]?.includes(option.id)}
                                            onChange={e => handleOptionChange(section.titulo, key, option.id, e.target.checked)}
                                        >
                                            {option.texto}
                                        </Checkbox>
                                    ))}
                                </div>
                            )
                        ))}
                    </Panel>
                </Collapse>
            ))}
            <div className="additional-options">
                <h3>Opciones Adicionales</h3>
                <div className="form-item">
                    <label>Leche</label>
                    <Select
                        value={additionalOptions.leche}
                        onChange={value => setAdditionalOptions(prev => ({ ...prev, leche: value }))}
                        style={{ width: '100%' }}
                    >
                        <Option value="entera">Leche entera</Option>
                        <Option value="deslactosada">Leche deslactosada</Option>
                    </Select>
                </div>
                <div className="form-item">
                    <label>Bebida</label>
                    <Select
                        value={additionalOptions.bebida}
                        onChange={value => setAdditionalOptions(prev => ({ ...prev, bebida: value }))}
                        style={{ width: '100%' }}
                    >
                        <Option value="leche">Bebida en leche</Option>
                        <Option value="agua">Bebida en agua</Option>
                    </Select>
                </div>
                <div className="form-item">
                    <label>Azúcar y/o Panela</label>
                    <Checkbox.Group
                        value={additionalOptions.azucarPanela}
                        onChange={checkedValues => setAdditionalOptions(prev => ({ ...prev, azucarPanela: checkedValues }))}
                    >
                        <Checkbox value="azucar">Azúcar</Checkbox>
                        <Checkbox value="panela">Panela</Checkbox>
                    </Checkbox.Group>
                </div>
                <div className="form-item">
                    <label>Vegetales</label>
                    <Select
                        value={additionalOptions.vegetales}
                        onChange={value => setAdditionalOptions(prev => ({ ...prev, vegetales: value }))}
                        style={{ width: '100%' }}
                    >
                        <Option value="crudos">Vegetales Crudos</Option>
                        <Option value="calientes">Vegetales Calientes</Option>
                    </Select>
                </div>
                <div className="form-item">
                    <label>Golosina Opcional</label>
                    <Checkbox
                        checked={additionalOptions.golosina}
                        onChange={e => setAdditionalOptions(prev => ({ ...prev, golosina: e.target.checked }))}
                    >
                        Golosina
                    </Checkbox>
                </div>
            </div>
            <Button onClick={showConfirmModal} type="primary" className="submit-button">
                Realizar Pedido
            </Button>
            <Modal
                title="Confirmación de Pedido"
                visible={confirmVisible}
                onOk={handleOk}
                onCancel={handleCancel}
            >
                <p>
                    Pacientes con restricción de azúcares o dieta hipoglúcida no deben consumir alimentos con mermelada, galletas dulces, ni harinas adicionales.
                </p>
                <p>
                    Prima la dieta recomendada por el médico tratante con las restricciones.
                </p>
                <p>
                    Asegúrese de los elementos seleccionados según las restricciones del paciente.
                </p>
            </Modal>
        </div>
    );
};

export default RealizarPedido;


        UserManagement.js:

import React, { useState, useEffect } from 'react';
import { Button, Table, Form, Input, Modal, Select } from 'antd';
import { registerUser, getUsuarios } from '../services/api';  // Asegúrate de tener estas funciones en tu API

const { Option } = Select;

const UserManagement = () => {
    const [usuarios, setUsuarios] = useState([]);
    const [loading, setLoading] = useState(true);
    const [visible, setVisible] = useState(false);
    const [form] = Form.useForm();

    useEffect(() => {
        const fetchUsuarios = async () => {
            try {
                const response = await getUsuarios();
                setUsuarios(response);
            } catch (error) {
                console.error('Error fetching users:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchUsuarios();
    }, []);

    const handleCreateUser = async (values) => {
        try {
            console.log("Datos enviados:", values);  // Verifica los datos que se envían
            const response = await registerUser(values);
            console.log("Respuesta del servidor:", response);  // Muestra la respuesta del servidor si la creación fue exitosa
            setVisible(false);
            form.resetFields();
            const updatedUsers = await getUsuarios();
            setUsuarios(updatedUsers);
        } catch (error) {
            console.error('Error creating user:', error);
            if (error.response) {
                // El servidor respondió con un código de estado que no está en el rango 2xx
                console.error('Datos del error:', error.response.data);
                console.error('Estado del error:', error.response.status);
                console.error('Cabeceras del error:', error.response.headers);
            } else if (error.request) {
                // La solicitud fue hecha pero no hubo respuesta
                console.error('Solicitud realizada pero sin respuesta:', error.request);
            } else {
                // Algo pasó al configurar la solicitud que desencadenó un error
                console.error('Error en la configuración de la solicitud:', error.message);
            }
        }
    };    

    const columns = [
        { title: 'Nombre', dataIndex: 'name', key: 'name' },
        { title: 'Cédula', dataIndex: 'cedula', key: 'cedula' },
        { title: 'Usuario', dataIndex: 'username', key: 'username' },
        { title: 'Email', dataIndex: 'email', key: 'email' },  // Asegurarse de que el email esté siendo capturado
        { title: 'Rol', dataIndex: 'role', key: 'role' },
    ];

    return (
        <div>
            <Button type="primary" onClick={() => setVisible(true)}>
                Crear Usuario
            </Button>
            <Table dataSource={usuarios} columns={columns} loading={loading} rowKey="id" />

            <Modal
                title="Crear Usuario"
                visible={visible}
                onCancel={() => setVisible(false)}
                footer={null}
            >
                <Form form={form} onFinish={handleCreateUser} layout="vertical">
                    <Form.Item name="name" label="Nombre" rules={[{ required: true, message: 'Por favor ingrese el nombre del usuario' }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="cedula" label="Cédula" rules={[{ required: true, message: 'Por favor ingrese la cédula' }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="username" label="Usuario" rules={[{ required: true, message: 'Por favor ingrese el nombre de usuario' }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="email" label="Email" rules={[{ required: true, message: 'Por favor ingrese el email' }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="password" label="Contraseña" rules={[{ required: true, message: 'Por favor ingrese la contraseña' }]}>
                        <Input.Password />
                    </Form.Item>
                    <Form.Item name="role" label="Rol" rules={[{ required: true, message: 'Por favor seleccione un rol' }]}>
                        <Select placeholder="Selecciona un rol">
                            <Option value="admin">Administrador</Option>
                            <Option value="coordinador">Coordinadora de Alimentos</Option>
                            <Option value="auxiliar">Auxiliar de Cocina</Option>
                            <Option value="jefe_enfermeria">Jefe de Enfermería</Option>
                        </Select>
                    </Form.Item>
                    <Button type="primary" htmlType="submit">
                        Crear
                    </Button>
                </Form>
            </Modal>
        </div>
    );
};

export default UserManagement;


    styles:
        App.scss:

/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos globales para el body */
body {
    /* Establecemos la fuente por defecto como 'Syne' con respaldo en sans-serif */
    font-family: 'Syne', sans-serif;
    /* Eliminamos los márgenes y el padding por defecto */
    margin: 0;
    padding: 0;
    /* Establecemos un color de fondo suave para todo el documento */
    background-color: #f8f9fa;
}

/* Estilos para los encabezados h1 */
h1 {
    /* Aplicamos el color institucional al texto del encabezado */
    color: #174288;
    /* Centramos el texto */
    text-align: center;
    /* Añadimos un margen superior para separar el encabezado del borde superior de la página */
    margin-top: 20px;
}

/* Estilos para las listas desordenadas */
ul {
    /* Eliminamos los estilos de lista predeterminados (puntos) */
    list-style-type: none;
    /* Eliminamos el padding predeterminado de las listas */
    padding: 0;

    /* Estilos para los elementos de la lista */
    li {
        /* Establecemos un fondo blanco para los elementos de la lista */
        background-color: #fff;
        /* Añadimos un borde alrededor de los elementos con un color gris claro */
        border: 1px solid #dee2e6;
        /* Añadimos un margen alrededor de cada elemento de la lista */
        margin: 10px;
        /* Añadimos un padding interno para separar el contenido del borde */
        padding: 10px;
        /* Redondeamos las esquinas de los elementos */
        border-radius: 5px;
        /* Añadimos una sombra suave para dar un efecto de elevación */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

        /* Estilos al pasar el cursor sobre los elementos de la lista */
        &:hover {
            /* Cambiamos el color del borde al color institucional al hacer hover */
            border-color: #00A7E2;
            /* Aumentamos la sombra y cambiamos su color para resaltar el elemento */
            box-shadow: 0 0 10px rgba(0, 167, 226, 0.5);
        }
    }
}


        DataManagement.scss:

@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

body {
    font-family: 'Syne', sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

h2, h3 {
    color: #2c3e50;
    margin-bottom: 20px;
    font-weight: 700;
}

h4 {
    font-weight: 700;
    color: #34495e;
    margin-bottom: 10px;
}

p {
    margin-bottom: 5px;
    font-size: 1rem;
    line-height: 1.5;
}

.section {
    margin-bottom: 40px;
}

.section h3 {
    border-bottom: 2px solid #e74c3c;
    padding-bottom: 10px;
    margin-bottom: 20px;
}

.list-group-item {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
    background-color: #fff;
}

.form-group {
    margin-bottom: 15px;
}

.form-group input,
.form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    font-family: 'Syne', sans-serif;
}

.form-control:focus {
    border-color: #3498db;
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
}

.btn-primary {
    background-color: #e74c3c;
    border-color: #e74c3c;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: 700;
    text-transform: uppercase;
    cursor: pointer;
}

.btn-primary:hover {
    background-color: #c0392b;
    border-color: #c0392b;
}

.btn-primary:focus {
    outline: none;
    box-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.mt-5 {
    margin-top: 3rem;
}

.mb-3 {
    margin-bottom: 1rem;
}

.list-group {
    padding-left: 0;
    margin-bottom: 20px;
}

.list-group-item h4 {
    margin-bottom: 10px;
}

.list-group-item p {
    margin: 0;
}


        FloatingButton.scss:

.floating-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;

    .btn {
        background-color: #174288;
        border: none;
        font-size: 24px;
        padding: 15px;
        border-radius: 50%;
        color: #fff;
        transition: background-color 0.3s, transform 0.3s;

        &:hover {
            background-color: #00A7E2;
            transform: scale(1.1);
        }
    }

    .floating-menu {
        position: absolute;
        bottom: 60px;
        right: 0;
        background-color: #fff;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;

        &.show {
            opacity: 1;
            visibility: visible;
        }

        .nav-link {
            color: #174288;
            position: relative;

            &:hover {
                color: #00A7E2;
            }
        }

        .pedidos-toggle {
            position: relative;
            cursor: pointer;
            &::after {
                content: '';
                display: inline-block;
                margin-left: 10px;
                transition: transform 0.3s ease;
                border: solid #174288;
                border-width: 0 2px 2px 0;
                padding: 3px;
                transform: rotate(45deg);
            }

            &.open::after {
                transform: rotate(-135deg);
            }
        }

        .submenu {
            margin-left: 20px;
            padding-left: 10px;
            border-left: 2px solid #00A7E2;
            opacity: 0;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease, opacity 0.3s ease;
        }

        .submenu-open {
            opacity: 1;
            max-height: 500px;
        }

        .submenu-item {
            background-color: #f0f0f0;
            border-radius: 4px;
            margin: 3px 0;
            padding: 8px 12px;

            &:hover {
                background-color: #e0e0e0;
            }

            &.active {
                background-color: #cce0ff;
                color: #174288;
            }
        }
    }
}

@media (min-width: 992px) {
    .floating-button {
        display: none;
    }
}


        Header.scss:

/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos para el contenedor principal del encabezado */
.header {
    /* Aplicamos la fuente 'Syne' a todo el contenedor del encabezado */
    font-family: 'Syne', sans-serif;
    /* Establecemos el color de fondo institucional para el encabezado */
    background-color: #174288;

    /* Estilos para el botón de la barra de navegación (hamburger menu) */
    .navbar-toggler {
        /* Establecemos el color del borde del botón al color secundario */
        border-color: #00A7E2;
    }

    /* Estilos para el logotipo dentro del encabezado */
    .logo {
        /* Definimos la altura del logotipo */
        height: 50px;
        /* Añadimos un margen a la derecha para separar el logotipo de los demás elementos */
        margin-right: 15px;
    }

    /* Estilos para los enlaces de navegación dentro del encabezado */
    .nav-link {
        /* Color blanco para los enlaces de navegación */
        color: #FFFFFF;

        /* Estilos al pasar el cursor sobre los enlaces */
        &:hover {
            /* Cambiamos el color del texto al gris claro cuando se hace hover */
            color: #DEE2E6;
        }
    }

    /* Estilos adicionales para los enlaces dentro de .header-right */
    .header-right .nav-link {
        /* Color de fondo institucional para los enlaces en .header-right */
        background-color: #174288;
        /* Color blanco para el texto */
        color: #fff;
        /* Padding interno para hacer los enlaces más grandes y fáciles de pulsar */
        padding: 10px 15px;
        /* Bordes redondeados para los enlaces */
        border-radius: 5px;
        /* Transición suave para el cambio de color de fondo */
        transition: background-color 0.3s;

        /* Estilos al pasar el cursor sobre estos enlaces */
        &:hover {
            /* Cambiamos el color de fondo al color secundario cuando se hace hover */
            background-color: #00A7E2;
        }
    }
}


        HistorialPedidos.scss:

.historial-pedidos {
    margin-top: 40px;

    h2 {
        font-size: 20px;
        margin-bottom: 20px;
    }

    .ant-collapse-header {
        font-weight: bold;
    }

    .option-group {
        margin-bottom: 15px;
    }
}


        Home.scss:

/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos para el contenedor principal de la página de inicio */
.home {
    /* Aplicamos la fuente 'Syne' a todo el contenedor */
    font-family: 'Syne', sans-serif;
    /* Establecemos un color de fondo gris claro */
    background-color: #DEE2E6;
    /* Color de texto institucional azul */
    color: #174288;
    /* Padding interno para espaciar el contenido */
    padding: 50px 20px;

    /* Estilos para los encabezados h1 dentro del contenedor .home */
    h1 {
        /* Tamaño de fuente grande para el encabezado principal */
        font-size: 2.5rem;
        /* Color de texto institucional azul */
        color: #174288;
    }

    /* Media query para dispositivos con un ancho máximo de 767px (dispositivos móviles) */
    @media (max-width: 767px) {
        /* Reducimos el padding en dispositivos móviles para mejor ajuste */
        padding: 30px 10px;

        /* Ajustamos el tamaño de fuente del h1 en dispositivos móviles */
        h1 {
            font-size: 2rem;
        }
    }
}


        Layout.scss:

/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos para el contenedor principal del layout */
.layout {
    /* Aplicamos la fuente 'Syne' a todo el layout */
    font-family: 'Syne', sans-serif;
    /* Aseguramos que el contenedor ocupe al menos la altura completa de la ventana */
    min-height: 100vh;
    /* Establecemos un color de fondo blanco para el layout */
    background-color: #FFFFFF;

    /* Estilos para la sección principal del contenido */
    .main-content {
        /* Hacemos que la sección principal ocupe el espacio disponible */
        flex: 1;
        /* Utilizamos flexbox para organizar los elementos internos */
        display: flex;
        /* Color de fondo gris claro para el área principal */
        background-color: #DEE2E6;

        /* Estilos para la sección específica de contenido dentro de main-content */
        .content {
            /* Hacemos que el contenido crezca para llenar el espacio disponible */
            flex-grow: 1;
            /* Añadimos padding interno para separar el contenido de los bordes */
            padding: 15px;
            /* Fondo blanco para la sección de contenido */
            background-color: #FFFFFF;
        }
    }
}

/* Media query para dispositivos con un ancho máximo de 767px (dispositivos móviles) */
@media (max-width: 767px) {
    /* Ajustes en la estructura de la sección principal en pantallas pequeñas */
    .main-content {
        /* Cambiamos la dirección de los elementos internos a una columna (de arriba hacia abajo) */
        flex-direction: column;

        /* Ajustes en el padding de la sección de contenido en pantallas pequeñas */
        .content {
            padding: 10px;
        }
    }

    /* Ocultamos la barra lateral en dispositivos móviles */
    .sidebar {
        display: none;
    }
}


        Login.scss:

/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Aplicamos la fuente 'Syne' a todo el documento */
body {
  font-family: 'Syne', sans-serif;
}

/* Estilos para la página de menús */
.menu-page {
  /* Padding para espaciar el contenido dentro de la página */
  padding: 20px;
  /* Color de fondo suave para la página */
  background-color: #f0f2f5;
}

/* Estilos para botones personalizados */
.custom-button {
  /* Color de fondo verde para los botones */
  background-color: #4caf50;
  /* Color de borde que coincide con el fondo */
  border-color: #4caf50;
  /* Color de texto blanco */
  color: white;
  /* Aplicamos la fuente 'Syne' a los botones */
  font-family: 'Syne', sans-serif;
}

/* Estilos para botones al hacer hover o focus */
.custom-button:hover,
.custom-button:focus {
  /* Cambiamos el color de fondo y borde al verde más oscuro */
  background-color: #45a049;
  border-color: #45a049;
}

/* Estilos para agrupar botones */
.button-group {
  /* Utilizamos flexbox para alinear los botones en fila */
  display: flex;
  /* Espacio entre los botones */
  gap: 10px;
}

/* Estilos para el contenedor de carga */
.loading-container {
  /* Centrar el contenido de carga horizontal y verticalmente */
  display: flex;
  justify-content: center;
  align-items: center;
  /* Ocupamos toda la altura de la ventana para centrar el contenido */
  height: 100vh;
}

/* Estilos para cada elemento de menú */
.menu-item {
  /* Margen inferior para separar los elementos de menú */
  margin-bottom: 20px;
  /* Padding interno para separar el contenido del borde */
  padding: 20px;
  /* Fondo blanco para los elementos de menú */
  background-color: white;
  /* Bordes redondeados */
  border-radius: 8px;
  /* Sombra suave para darle un efecto de elevación */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Estilos para los encabezados h3 dentro de .menu-item */
.menu-item h3 {
  /* Margen inferior para separar el encabezado del contenido siguiente */
  margin-bottom: 10px;
}

/* Estilos para los encabezados h4 dentro de .menu-item */
.menu-item h4 {
  /* Margen superior para separar el encabezado del contenido anterior */
  margin-top: 20px;
}

/* Estilos específicos para botones personalizados dentro de modales de Ant Design */
.ant-modal-footer .custom-button {
  /* Margen derecho para separar los botones en la fila */
  margin-right: 8px;
}


        Menus.scss:

.menu-page {
  /* Padding para espaciar el contenido dentro de la página */
  padding: 20px;
}

.custom-button {
  /* Margen inferior para separar el botón de otros elementos */
  margin-bottom: 10px;
}

.vertical-buttons {
  /* Flexbox en dirección columna para apilar los botones verticalmente */
  display: flex;
  flex-direction: column;
  /* Espacio entre los botones */
  gap: 10px;
}

.button-group {
  /* Flexbox en dirección columna para apilar los botones verticalmente */
  display: flex;
  flex-direction: column;
  /* Espacio entre los botones */
  gap: 10px;
  /* Margen inferior para separar el grupo de botones de otros elementos */
  margin-bottom: 20px;
}

.ant-btn {
  /* Margen derecho para separar los botones en una fila */
  margin-right: 10px;
  /* Asegura que los botones ocupen todo el ancho disponible */
  width: 100%;
}

.ant-collapse-content-box {
  /* Flexbox en dirección columna para apilar el contenido verticalmente */
  display: flex;
  flex-direction: column;
  /* Espacio entre los elementos dentro del contenido colapsado */
  gap: 10px;
}

.menu-details {
  /* Estilos específicos para la tipografía dentro de los detalles del menú */
  .ant-typography {
    /* Margen superior para separar la tipografía de otros elementos */
    margin-top: 20px;
  }
}

.menu-list {
  /* Margen superior para separar la lista de menús de otros elementos */
  margin-top: 20px;
}

.loading-container {
  /* Centrar el texto de carga */
  text-align: center;
  /* Padding superior e inferior para espaciar el contenido de carga */
  padding: 50px 0;
}

.save-button {
  /* Ajusta el ancho del botón a la mitad del contenedor menos 5px */
  width: calc(50% - 5px);
  /* Margen derecho para separar el botón de otros elementos */
  margin-right: 10px;
}

.modal-footer {
  /* Flexbox para centrar los botones en la barra de pie de la ventana modal */
  display: flex;
  justify-content: center;
  /* Espacio entre los botones */
  gap: 10px;
}

.modal-footer .ant-btn {
  /* Ancho fijo para los botones dentro de la ventana modal */
  width: 100px;
  /* Margen izquierdo y derecho para espaciar los botones entre sí */
  margin: 0 10px;
}

.menu-title {
  /* Negrita para resaltar el título del menú */
  font-weight: bold;
}


        PedidosPendientes.scss:

// src/components/PedidosPendientes.scss
.pedidos-pendientes {
    .pedido {
        border: 1px solid #ccc;
        margin-bottom: 20px;
        padding: 20px;
        background-color: #f9f9f9;

        .section {
            margin-bottom: 10px;

            h4 {
                color: #333;
            }

            ul {
                padding-left: 20px;

                li {
                    list-style-type: disc;
                }
            }

            button {
                padding: 10px;
                background-color: #007bff;
                color: #fff;
                border: none;
                cursor: pointer;

                &:disabled {
                    background-color: #6c757d;
                    cursor: not-allowed;
                }
            }
        }
    }
}


        RealizarPedidos.scss:

.realizar-pedido {
  /* Establece un ancho máximo de 600px y centra el contenedor */
  max-width: 600px;
  margin: 0 auto;
  /* Padding interno para espaciar el contenido */
  padding: 20px;
  /* Fondo blanco para el contenedor */
  background: #fff;
  /* Bordes redondeados */
  border-radius: 8px;
  /* Sombra suave para darle un efecto de elevación */
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

  h2 {
    /* Centra el texto del encabezado */
    text-align: center;
    /* Margen inferior para separar el encabezado del contenido siguiente */
    margin-bottom: 20px;
    /* Color del texto en azul institucional */
    color: #174288;
  }

  .form-item {
    /* Margen inferior para separar los elementos del formulario */
    margin-bottom: 20px;
  }

  .ant-select {
    /* Asegura que el selector ocupe todo el ancho disponible */
    width: 100%;
  }

  .section-collapse {
    /* Margen inferior para separar las secciones colapsables */
    margin-bottom: 20px;
  }

  .option-group {
    /* Utiliza flexbox en dirección columna para apilar los elementos verticalmente */
    display: flex;
    flex-direction: column;
    /* Margen izquierdo para dar sangría al grupo de opciones */
    margin-left: 20px;

    h4 {
      /* Margen inferior para separar el título del contenido siguiente */
      margin-bottom: 10px;
      /* Color del texto en azul institucional */
      color: #174288;
    }

    .ant-checkbox-wrapper {
      /* Margen inferior para separar las opciones de checkbox */
      margin-bottom: 5px;
    }
  }

  .additional-options {
    /* Margen superior para separar las opciones adicionales del contenido anterior */
    margin-top: 20px;

    .form-item {
      /* Margen inferior más pequeño para separar los elementos de las opciones adicionales */
      margin-bottom: 10px;
    }
  }

  .submit-button {
    /* Asegura que el botón de envío ocupe todo el ancho disponible */
    width: 100%;
  }
}


        Sidebar.scss:

/* Importamos la fuente 'Syne' desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Syne:wght@400;700&display=swap');

/* Estilos principales para la barra lateral (sidebar) */
.sidebar {
    font-family: 'Syne', sans-serif;
    background-color: #174288;
    color: #FFFFFF;
    padding: 15px;

    .nav-link {
        color: #FFFFFF;
        padding: 10px 15px;
        border-radius: 4px;
        margin: 5px 0;

        &:hover {
            background-color: #00A7E2;
            color: #DEE2E6;
        }

        &.active {
            background-color: #00A7E2;
            color: #DEE2E6;
        }
    }

    .pedidos-toggle {
        position: relative;

        /* Añadimos una animación de rotación al ícono del botón de Pedidos */
        &::after {
            content: '';
            display: inline-block;
            margin-left: 10px;
            transition: transform 0.3s ease;
            border: solid #FFFFFF;
            border-width: 0 2px 2px 0;
            padding: 3px;
            transform: rotate(45deg);
        }

        &.open::after {
            transform: rotate(-135deg);
        }
    }

    .submenu {
        margin-left: 20px;
        padding-left: 10px;
        border-left: 2px solid #00A7E2;
        opacity: 0;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease, opacity 0.3s ease;
    }

    .submenu-open {
        opacity: 1;
        max-height: 500px; /* un valor suficientemente grande para contener todo el contenido */
    }

    .submenu-item {
        background-color: #0056A2;
        border-radius: 4px;
        margin: 3px 0;
        padding: 8px 12px;

        &:hover {
            background-color: #0074D9;
        }

        &.active {
            background-color: #0074D9;
            color: #FFFFFF;
        }
    }

    @media (max-width: 767px) {
        display: none;
    }
}

        UserManagement.scss:

   // UserManagement.scss

.user-management {
  padding: 20px;

  .ant-form {
    margin-bottom: 20px;

    .ant-form-item {
      margin-right: 10px;
    }
  }

  .ant-table {
    margin-top: 20px;
  }
}


    utils:
        inactivityHandler.js:

        // src/utils/inactivityHandler.js

let inactivityTime = function () {
    let time;
    let warningTimeout;

    // Restablecer el temporizador en caso de actividad del usuario
    function resetTimer() {
        clearTimeout(time);
        clearTimeout(warningTimeout);
        startTimer();
    }

    // Configurar eventos para detectar actividad del usuario
    window.onload = resetTimer;
    document.onmousemove = resetTimer;
    document.onkeypress = resetTimer;
    document.onclick = resetTimer;
    document.onscroll = resetTimer;
    document.onresize = resetTimer;
    
    // Iniciar el temporizador de inactividad
    function startTimer() {
        // Mostrar alerta después de 50 minutos de inactividad
        warningTimeout = setTimeout(showWarning, 50 * 60 * 1000);
    }

    // Mostrar alerta de confirmación
    function showWarning() {
        alert("Ha pasado un tiempo desde su última actividad. Por favor, confirme que sigue aquí.");
        resetTimer();  // Si el usuario cierra la alerta, reiniciar el temporizador
    }

    startTimer();  // Iniciar el temporizador al cargar la página
};

export default inactivityTime;


App.js:

import React, { useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';
import inactivityTime from './utils/inactivityHandler';

// Importación de las páginas
import Home from './pages/Home';
import Login from './pages/Login';
import RealizarPedido from './pages/RealizarPedido';
import DataManagement from './pages/DataManagement';
import MenuPage from './pages/MenuPage';
import PedidosPendientes from './pages/PedidosPendientes';
import HistorialPedidos from './pages/HistorialPedidos';
import UserManagement from './pages/UserManagement';

// Importación de componentes
import Layout from './components/Layout';
import PrivateRoute from './components/PrivateRoute';

// Importación de estilos
import './styles/App.scss';

function App() {
  useEffect(() => {
    inactivityTime();  // Activar el manejador de inactividad al cargar la aplicación
  }, []);

  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />

        <Route path="/" element={<PrivateRoute><Layout /></PrivateRoute>}>
          <Route path="/" element={<Home />} />
          <Route 
            path="/menus" 
            element={<PrivateRoute requiredRoles={["admin", "coordinador"]}><MenuPage /></PrivateRoute>} />
          <Route 
            path="/realizar-pedido" 
            element={<PrivateRoute requiredRoles={["admin", "jefe_enfermeria", "coordinador"]}><RealizarPedido /></PrivateRoute>} />
          <Route 
            path="/pedidos/pendientes" 
            element={<PrivateRoute requiredRoles={["admin", "coordinador", "auxiliar"]}><PedidosPendientes /></PrivateRoute>} />
          <Route 
            path="/pedidos/historial" 
            element={<PrivateRoute requiredRoles={["admin", "coordinador", "auxiliar"]}><HistorialPedidos /></PrivateRoute>} />
          <Route 
            path="/gestion-datos" 
            element={<PrivateRoute requiredRoles={["admin", "jefe_enfermeria"]}><DataManagement /></PrivateRoute>} />
          <Route 
            path="/gestion-usuarios" 
            element={<PrivateRoute requiredRoles={["admin"]}><UserManagement /></PrivateRoute>} 
          />  {/* Nueva ruta para la gestión de usuarios protegida por rol */}
        </Route>
      </Routes>
    </Router>
  );
}

export default App;



